(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.turf = f()}})(function(){var define,module,exports;return (function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
"use strict";function bboxPolygon(e,r){void 0===r&&(r={});var o=Number(e[0]),t=Number(e[1]),u=Number(e[2]),b=Number(e[3]);if(6===e.length)throw new Error("@turf/bbox-polygon does not support BBox with 6 positions");var p=[o,t],s=[o,b],i=[u,b],n=[u,t];return helpers_1.polygon([[p,n,i,s,p]],r.properties,{bbox:e,id:r.id})}Object.defineProperty(exports,"__esModule",{value:!0});var helpers_1=require("@turf/helpers");exports.default=bboxPolygon;
},{"@turf/helpers":15}],2:[function(require,module,exports){
"use strict";function bbox(e){var t=[1/0,1/0,-1/0,-1/0];return meta_1.coordEach(e,function(e){t[0]>e[0]&&(t[0]=e[0]),t[1]>e[1]&&(t[1]=e[1]),t[2]<e[0]&&(t[2]=e[0]),t[3]<e[1]&&(t[3]=e[1])}),t}Object.defineProperty(exports,"__esModule",{value:!0});var meta_1=require("@turf/meta");exports.default=bbox;
},{"@turf/meta":20}],3:[function(require,module,exports){
"use strict";function bearing(e,a,r){if(void 0===r&&(r={}),!0===r.final)return calculateFinalBearing(e,a);var n=invariant_1.getCoord(e),i=invariant_1.getCoord(a),t=helpers_1.degreesToRadians(n[0]),s=helpers_1.degreesToRadians(i[0]),o=helpers_1.degreesToRadians(n[1]),l=helpers_1.degreesToRadians(i[1]),d=Math.sin(s-t)*Math.cos(l),h=Math.cos(o)*Math.sin(l)-Math.sin(o)*Math.cos(l)*Math.cos(s-t);return helpers_1.radiansToDegrees(Math.atan2(d,h))}function calculateFinalBearing(e,a){var r=bearing(a,e);return r=(r+180)%360}Object.defineProperty(exports,"__esModule",{value:!0});var helpers_1=require("@turf/helpers"),invariant_1=require("@turf/invariant");exports.default=bearing;
},{"@turf/helpers":15,"@turf/invariant":16}],4:[function(require,module,exports){
"use strict";function booleanContains(n,o){var t=invariant_1.getGeom(n),e=invariant_1.getGeom(o),i=invariant_1.getType(n),r=invariant_1.getType(o),a=invariant_1.getCoords(n),u=invariant_1.getCoords(o);switch(i){case"Point":switch(r){case"Point":return compareCoords(a,u);default:throw new Error("feature2 "+r+" geometry not supported")}case"MultiPoint":switch(r){case"Point":return isPointInMultiPoint(t,e);case"MultiPoint":return isMultiPointInMultiPoint(t,e);default:throw new Error("feature2 "+r+" geometry not supported")}case"LineString":switch(r){case"Point":return boolean_point_on_line_1.default(e,t,{ignoreEndVertices:!0});case"LineString":return isLineOnLine(t,e);case"MultiPoint":return isMultiPointOnLine(t,e);default:throw new Error("feature2 "+r+" geometry not supported")}case"Polygon":switch(r){case"Point":return boolean_point_in_polygon_1.default(e,t,{ignoreBoundary:!0});case"LineString":return isLineInPoly(t,e);case"Polygon":return isPolyInPoly(t,e);case"MultiPoint":return isMultiPointInPoly(t,e);default:throw new Error("feature2 "+r+" geometry not supported")}default:throw new Error("feature1 "+i+" geometry not supported")}}function isPointInMultiPoint(n,o){var t,e=!1;for(t=0;t<n.coordinates.length;t++)if(compareCoords(n.coordinates[t],o.coordinates)){e=!0;break}return e}function isMultiPointInMultiPoint(n,o){for(var t=0,e=o.coordinates;t<e.length;t++){for(var i=e[t],r=!1,a=0,u=n.coordinates;a<u.length;a++){if(compareCoords(i,u[a])){r=!0;break}}if(!r)return!1}return!0}function isMultiPointOnLine(n,o){for(var t=!1,e=0,i=o.coordinates;e<i.length;e++){var r=i[e];if(boolean_point_on_line_1.default(r,n,{ignoreEndVertices:!0})&&(t=!0),!boolean_point_on_line_1.default(r,n))return!1}return!!t}function isMultiPointInPoly(n,o){for(var t=0,e=o.coordinates;t<e.length;t++){var i=e[t];if(!boolean_point_in_polygon_1.default(i,n,{ignoreBoundary:!0}))return!1}return!0}function isLineOnLine(n,o){for(var t=!1,e=0,i=o.coordinates;e<i.length;e++){var r=i[e];if(boolean_point_on_line_1.default({type:"Point",coordinates:r},n,{ignoreEndVertices:!0})&&(t=!0),!boolean_point_on_line_1.default({type:"Point",coordinates:r},n,{ignoreEndVertices:!1}))return!1}return t}function isLineInPoly(n,o){var t=!1,e=0;if(!doBBoxOverlap(bbox_1.default(n),bbox_1.default(o)))return!1;for(e;e<o.coordinates.length-1;e++){var i=getMidpoint(o.coordinates[e],o.coordinates[e+1]);if(boolean_point_in_polygon_1.default({type:"Point",coordinates:i},n,{ignoreBoundary:!0})){t=!0;break}}return t}function isPolyInPoly(n,o){if("Feature"===n.type&&null===n.geometry)return!1;if("Feature"===o.type&&null===o.geometry)return!1;if(!doBBoxOverlap(bbox_1.default(n),bbox_1.default(o)))return!1;for(var t=invariant_1.getGeom(o).coordinates,e=0,i=t;e<i.length;e++)for(var r=i[e],a=0,u=r;a<u.length;a++){var l=u[a];if(!boolean_point_in_polygon_1.default(l,n))return!1}return!0}function doBBoxOverlap(n,o){return!(n[0]>o[0])&&(!(n[2]<o[2])&&(!(n[1]>o[1])&&!(n[3]<o[3])))}function compareCoords(n,o){return n[0]===o[0]&&n[1]===o[1]}function getMidpoint(n,o){return[(n[0]+o[0])/2,(n[1]+o[1])/2]}var __importDefault=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(exports,"__esModule",{value:!0});var bbox_1=__importDefault(require("@turf/bbox")),boolean_point_in_polygon_1=__importDefault(require("@turf/boolean-point-in-polygon")),boolean_point_on_line_1=__importDefault(require("@turf/boolean-point-on-line")),invariant_1=require("@turf/invariant");exports.default=booleanContains,exports.isPointInMultiPoint=isPointInMultiPoint,exports.isMultiPointInMultiPoint=isMultiPointInMultiPoint,exports.isMultiPointOnLine=isMultiPointOnLine,exports.isMultiPointInPoly=isMultiPointInPoly,exports.isLineOnLine=isLineOnLine,exports.isLineInPoly=isLineInPoly,exports.isPolyInPoly=isPolyInPoly,exports.doBBoxOverlap=doBBoxOverlap,exports.compareCoords=compareCoords,exports.getMidpoint=getMidpoint;
},{"@turf/bbox":2,"@turf/boolean-point-in-polygon":6,"@turf/boolean-point-on-line":7,"@turf/invariant":16}],5:[function(require,module,exports){
"use strict";function booleanOverlap(e,r){if(!e)throw new Error("feature1 is required");if(!r)throw new Error("feature2 is required");var t=invariant_1.getType(e);if(t!==invariant_1.getType(r))throw new Error("features must be of the same type");if("Point"===t)throw new Error("Point geometry not supported");if(new GeojsonEquality({precision:6}).compare(e,r))return!1;var n=0;switch(t){case"MultiPoint":var i=meta_1.coordAll(e),a=meta_1.coordAll(r);i.forEach(function(e){a.forEach(function(r){e[0]===r[0]&&e[1]===r[1]&&n++})});break;case"LineString":case"MultiLineString":meta_1.segmentEach(e,function(e){meta_1.segmentEach(r,function(r){line_overlap_1.default(e,r).features.length&&n++})});break;case"Polygon":case"MultiPolygon":meta_1.segmentEach(e,function(e){meta_1.segmentEach(r,function(r){line_intersect_1.default(e,r).features.length&&n++})})}return n>0}Object.defineProperty(exports,"__esModule",{value:!0});var meta_1=require("@turf/meta"),invariant_1=require("@turf/invariant"),line_overlap_1=require("@turf/line-overlap"),line_intersect_1=require("@turf/line-intersect"),GeojsonEquality=require("geojson-equality");exports.default=booleanOverlap;
},{"@turf/invariant":16,"@turf/line-intersect":17,"@turf/line-overlap":18,"@turf/meta":20,"geojson-equality":28}],6:[function(require,module,exports){
"use strict";function booleanPointInPolygon(n,r,o){if(void 0===o&&(o={}),!n)throw new Error("point is required");if(!r)throw new Error("polygon is required");var e=invariant_1.getCoord(n),i=invariant_1.getGeom(r),t=i.type,a=r.bbox,g=i.coordinates;if(a&&!1===inBBox(e,a))return!1;"Polygon"===t&&(g=[g]);for(var u=!1,l=0;l<g.length&&!u;l++)if(inRing(e,g[l][0],o.ignoreBoundary)){for(var f=!1,v=1;v<g[l].length&&!f;)inRing(e,g[l][v],!o.ignoreBoundary)&&(f=!0),v++;f||(u=!0)}return u}function inRing(n,r,o){var e=!1;r[0][0]===r[r.length-1][0]&&r[0][1]===r[r.length-1][1]&&(r=r.slice(0,r.length-1));for(var i=0,t=r.length-1;i<r.length;t=i++){var a=r[i][0],g=r[i][1],u=r[t][0],l=r[t][1];if(n[1]*(a-u)+g*(u-n[0])+l*(n[0]-a)==0&&(a-n[0])*(u-n[0])<=0&&(g-n[1])*(l-n[1])<=0)return!o;g>n[1]!=l>n[1]&&n[0]<(u-a)*(n[1]-g)/(l-g)+a&&(e=!e)}return e}function inBBox(n,r){return r[0]<=n[0]&&r[1]<=n[1]&&r[2]>=n[0]&&r[3]>=n[1]}Object.defineProperty(exports,"__esModule",{value:!0});var invariant_1=require("@turf/invariant");exports.default=booleanPointInPolygon;
},{"@turf/invariant":16}],7:[function(require,module,exports){
"use strict";function booleanPointOnLine(t,n,e){void 0===e&&(e={});for(var a=invariant_1.getCoord(t),r=invariant_1.getCoords(n),i=0;i<r.length-1;i++){var o=!1;if(e.ignoreEndVertices&&(0===i&&(o="start"),i===r.length-2&&(o="end"),0===i&&i+1===r.length-1&&(o="both")),isPointOnLineSegment(r[i],r[i+1],a,o))return!0}return!1}function isPointOnLineSegment(t,n,e,a){var r=e[0],i=e[1],o=t[0],s=t[1],b=n[0],h=n[1],u=e[0]-o,v=e[1]-s,d=b-o,M=h-s;return 0==u*M-v*d&&(a?"start"===a?Math.abs(d)>=Math.abs(M)?d>0?o<r&&r<=b:b<=r&&r<o:M>0?s<i&&i<=h:h<=i&&i<s:"end"===a?Math.abs(d)>=Math.abs(M)?d>0?o<=r&&r<b:b<r&&r<=o:M>0?s<=i&&i<h:h<i&&i<=s:"both"===a&&(Math.abs(d)>=Math.abs(M)?d>0?o<r&&r<b:b<r&&r<o:M>0?s<i&&i<h:h<i&&i<s):Math.abs(d)>=Math.abs(M)?d>0?o<=r&&r<=b:b<=r&&r<=o:M>0?s<=i&&i<=h:h<=i&&i<=s)}Object.defineProperty(exports,"__esModule",{value:!0});var invariant_1=require("@turf/invariant");exports.default=booleanPointOnLine;
},{"@turf/invariant":16}],8:[function(require,module,exports){
"use strict";function center(e,r){void 0===r&&(r={});var t=bbox_1.default(e),o=(t[0]+t[2])/2,u=(t[1]+t[3])/2;return helpers_1.point([o,u],r.properties,r)}Object.defineProperty(exports,"__esModule",{value:!0});var bbox_1=require("@turf/bbox"),helpers_1=require("@turf/helpers");exports.default=center;
},{"@turf/bbox":2,"@turf/helpers":15}],9:[function(require,module,exports){
"use strict";function cleanCoords(e,r){var n="object"==typeof r?r.mutate:r;if(!e)throw new Error("geojson is required");var t=invariant.getType(e),o=[];switch(t){case"LineString":o=cleanLine(e);break;case"MultiLineString":case"Polygon":invariant.getCoords(e).forEach(function(e){o.push(cleanLine(e))});break;case"MultiPolygon":invariant.getCoords(e).forEach(function(e){var r=[];e.forEach(function(e){r.push(cleanLine(e))}),o.push(r)});break;case"Point":return e;case"MultiPoint":var a={};invariant.getCoords(e).forEach(function(e){var r=e.join("-");a.hasOwnProperty(r)||(o.push(e),a[r]=!0)});break;default:throw new Error(t+" geometry not supported")}return e.coordinates?!0===n?(e.coordinates=o,e):{type:t,coordinates:o}:!0===n?(e.geometry.coordinates=o,e):helpers.feature({type:t,coordinates:o},e.properties,e.bbox,e.id)}function cleanLine(e){var r=invariant.getCoords(e);if(2===r.length&&!equals(r[0],r[1]))return r;var n,t,o,a=[],i=r.length-1;a.push(r[0]);for(var s=1;s<i;s++)n=r[s-1],t=r[s],o=r[s+1],isPointOnLineSegment(n,o,t)||a.push(t);return a.push(o),a}function equals(e,r){return e[0]===r[0]&&e[1]===r[1]}function isPointOnLineSegment(e,r,n){var t=n[0],o=n[1],a=e[0],i=e[1],s=r[0],u=r[1],c=t-a,l=o-i,h=s-a,f=u-i;return 0==c*f-l*h&&(Math.abs(h)>=Math.abs(f)?h>0?a<=t&&t<=s:s<=t&&t<=a:f>0?i<=o&&o<=u:u<=o&&o<=i)}var helpers=require("@turf/helpers"),invariant=require("@turf/invariant");module.exports=cleanCoords,module.exports.default=cleanCoords;
},{"@turf/helpers":10,"@turf/invariant":11}],10:[function(require,module,exports){
"use strict";function feature(r,e,t){if(t=t||{},!isObject(t))throw new Error("options is invalid");var o=t.bbox,i=t.id;if(void 0===r)throw new Error("geometry is required");if(e&&e.constructor!==Object)throw new Error("properties must be an Object");o&&validateBBox(o),i&&validateId(i);var n={type:"Feature"};return i&&(n.id=i),o&&(n.bbox=o),n.properties=e||{},n.geometry=r,n}function geometry(r,e,t){if(t=t||{},!isObject(t))throw new Error("options is invalid");var o=t.bbox;if(!r)throw new Error("type is required");if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");o&&validateBBox(o);var i;switch(r){case"Point":i=point(e).geometry;break;case"LineString":i=lineString(e).geometry;break;case"Polygon":i=polygon(e).geometry;break;case"MultiPoint":i=multiPoint(e).geometry;break;case"MultiLineString":i=multiLineString(e).geometry;break;case"MultiPolygon":i=multiPolygon(e).geometry;break;default:throw new Error(r+" is invalid")}return o&&(i.bbox=o),i}function point(r,e,t){if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");if(r.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!isNumber(r[0])||!isNumber(r[1]))throw new Error("coordinates must contain numbers");return feature({type:"Point",coordinates:r},e,t)}function points(r,e,t){if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");return featureCollection(r.map(function(r){return point(r,e)}),t)}function polygon(r,e,t){if(!r)throw new Error("coordinates is required");for(var o=0;o<r.length;o++){var i=r[o];if(i.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var n=0;n<i[i.length-1].length;n++){if(0===o&&0===n&&!isNumber(i[0][0])||!isNumber(i[0][1]))throw new Error("coordinates must contain numbers");if(i[i.length-1][n]!==i[0][n])throw new Error("First and last Position are not equivalent.")}}return feature({type:"Polygon",coordinates:r},e,t)}function polygons(r,e,t){if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");return featureCollection(r.map(function(r){return polygon(r,e)}),t)}function lineString(r,e,t){if(!r)throw new Error("coordinates is required");if(r.length<2)throw new Error("coordinates must be an array of two or more positions");if(!isNumber(r[0][1])||!isNumber(r[0][1]))throw new Error("coordinates must contain numbers");return feature({type:"LineString",coordinates:r},e,t)}function lineStrings(r,e,t){if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");return featureCollection(r.map(function(r){return lineString(r,e)}),t)}function featureCollection(r,e){if(e=e||{},!isObject(e))throw new Error("options is invalid");var t=e.bbox,o=e.id;if(!r)throw new Error("No features passed");if(!Array.isArray(r))throw new Error("features must be an Array");t&&validateBBox(t),o&&validateId(o);var i={type:"FeatureCollection"};return o&&(i.id=o),t&&(i.bbox=t),i.features=r,i}function multiLineString(r,e,t){if(!r)throw new Error("coordinates is required");return feature({type:"MultiLineString",coordinates:r},e,t)}function multiPoint(r,e,t){if(!r)throw new Error("coordinates is required");return feature({type:"MultiPoint",coordinates:r},e,t)}function multiPolygon(r,e,t){if(!r)throw new Error("coordinates is required");return feature({type:"MultiPolygon",coordinates:r},e,t)}function geometryCollection(r,e,t){if(!r)throw new Error("geometries is required");if(!Array.isArray(r))throw new Error("geometries must be an Array");return feature({type:"GeometryCollection",geometries:r},e,t)}function round(r,e){if(void 0===r||null===r||isNaN(r))throw new Error("num is required");if(e&&!(e>=0))throw new Error("precision must be a positive number");var t=Math.pow(10,e||0);return Math.round(r*t)/t}function radiansToLength(r,e){if(void 0===r||null===r)throw new Error("radians is required");if(e&&"string"!=typeof e)throw new Error("units must be a string");var t=factors[e||"kilometers"];if(!t)throw new Error(e+" units is invalid");return r*t}function lengthToRadians(r,e){if(void 0===r||null===r)throw new Error("distance is required");if(e&&"string"!=typeof e)throw new Error("units must be a string");var t=factors[e||"kilometers"];if(!t)throw new Error(e+" units is invalid");return r/t}function lengthToDegrees(r,e){return radiansToDegrees(lengthToRadians(r,e))}function bearingToAzimuth(r){if(null===r||void 0===r)throw new Error("bearing is required");var e=r%360;return e<0&&(e+=360),e}function radiansToDegrees(r){if(null===r||void 0===r)throw new Error("radians is required");return r%(2*Math.PI)*180/Math.PI}function degreesToRadians(r){if(null===r||void 0===r)throw new Error("degrees is required");return r%360*Math.PI/180}function convertLength(r,e,t){if(null===r||void 0===r)throw new Error("length is required");if(!(r>=0))throw new Error("length must be a positive number");return radiansToLength(lengthToRadians(r,e),t||"kilometers")}function convertArea(r,e,t){if(null===r||void 0===r)throw new Error("area is required");if(!(r>=0))throw new Error("area must be a positive number");var o=areaFactors[e||"meters"];if(!o)throw new Error("invalid original units");var i=areaFactors[t||"kilometers"];if(!i)throw new Error("invalid final units");return r/o*i}function isNumber(r){return!isNaN(r)&&null!==r&&!Array.isArray(r)}function isObject(r){return!!r&&r.constructor===Object}function validateBBox(r){if(!r)throw new Error("bbox is required");if(!Array.isArray(r))throw new Error("bbox must be an Array");if(4!==r.length&&6!==r.length)throw new Error("bbox must be an Array of 4 or 6 numbers");r.forEach(function(r){if(!isNumber(r))throw new Error("bbox must only contain numbers")})}function validateId(r){if(!r)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof r))throw new Error("id must be a number or a string")}function radians2degrees(){throw new Error("method has been renamed to `radiansToDegrees`")}function degrees2radians(){throw new Error("method has been renamed to `degreesToRadians`")}function distanceToDegrees(){throw new Error("method has been renamed to `lengthToDegrees`")}function distanceToRadians(){throw new Error("method has been renamed to `lengthToRadians`")}function radiansToDistance(){throw new Error("method has been renamed to `radiansToLength`")}function bearingToAngle(){throw new Error("method has been renamed to `bearingToAzimuth`")}function convertDistance(){throw new Error("method has been renamed to `convertLength`")}Object.defineProperty(exports,"__esModule",{value:!0});var earthRadius=6371008.8,factors={meters:earthRadius,metres:earthRadius,millimeters:1e3*earthRadius,millimetres:1e3*earthRadius,centimeters:100*earthRadius,centimetres:100*earthRadius,kilometers:earthRadius/1e3,kilometres:earthRadius/1e3,miles:earthRadius/1609.344,nauticalmiles:earthRadius/1852,inches:39.37*earthRadius,yards:earthRadius/1.0936,feet:3.28084*earthRadius,radians:1,degrees:earthRadius/111325},unitsFactors={meters:1,metres:1,millimeters:1e3,millimetres:1e3,centimeters:100,centimetres:100,kilometers:.001,kilometres:.001,miles:1/1609.344,nauticalmiles:1/1852,inches:39.37,yards:1/1.0936,feet:3.28084,radians:1/earthRadius,degrees:1/111325},areaFactors={meters:1,metres:1,millimeters:1e6,millimetres:1e6,centimeters:1e4,centimetres:1e4,kilometers:1e-6,kilometres:1e-6,acres:247105e-9,miles:3.86e-7,yards:1.195990046,feet:10.763910417,inches:1550.003100006};exports.earthRadius=earthRadius,exports.factors=factors,exports.unitsFactors=unitsFactors,exports.areaFactors=areaFactors,exports.feature=feature,exports.geometry=geometry,exports.point=point,exports.points=points,exports.polygon=polygon,exports.polygons=polygons,exports.lineString=lineString,exports.lineStrings=lineStrings,exports.featureCollection=featureCollection,exports.multiLineString=multiLineString,exports.multiPoint=multiPoint,exports.multiPolygon=multiPolygon,exports.geometryCollection=geometryCollection,exports.round=round,exports.radiansToLength=radiansToLength,exports.lengthToRadians=lengthToRadians,exports.lengthToDegrees=lengthToDegrees,exports.bearingToAzimuth=bearingToAzimuth,exports.radiansToDegrees=radiansToDegrees,exports.degreesToRadians=degreesToRadians,exports.convertLength=convertLength,exports.convertArea=convertArea,exports.isNumber=isNumber,exports.isObject=isObject,exports.validateBBox=validateBBox,exports.validateId=validateId,exports.radians2degrees=radians2degrees,exports.degrees2radians=degrees2radians,exports.distanceToDegrees=distanceToDegrees,exports.distanceToRadians=distanceToRadians,exports.radiansToDistance=radiansToDistance,exports.bearingToAngle=bearingToAngle,exports.convertDistance=convertDistance;
},{}],11:[function(require,module,exports){
"use strict";function getCoord(e){if(!e)throw new Error("coord is required");if("Feature"===e.type&&null!==e.geometry&&"Point"===e.geometry.type)return e.geometry.coordinates;if("Point"===e.type)return e.coordinates;if(Array.isArray(e)&&e.length>=2&&void 0===e[0].length&&void 0===e[1].length)return e;throw new Error("coord must be GeoJSON Point or an Array of numbers")}function getCoords(e){if(!e)throw new Error("coords is required");if("Feature"===e.type&&null!==e.geometry)return e.geometry.coordinates;if(e.coordinates)return e.coordinates;if(Array.isArray(e))return e;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}function containsNumber(e){if(e.length>1&&helpers.isNumber(e[0])&&helpers.isNumber(e[1]))return!0;if(Array.isArray(e[0])&&e[0].length)return containsNumber(e[0]);throw new Error("coordinates must only contain numbers")}function geojsonType(e,r,t){if(!r||!t)throw new Error("type and name required");if(!e||e.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.type)}function featureOf(e,r,t){if(!e)throw new Error("No feature passed");if(!t)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!e.geometry||e.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.geometry.type)}function collectionOf(e,r,t){if(!e)throw new Error("No featureCollection passed");if(!t)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+t+", FeatureCollection required");for(var o=0;o<e.features.length;o++){var n=e.features[o];if(!n||"Feature"!==n.type||!n.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!n.geometry||n.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+n.geometry.type)}}function getGeom(e){if(!e)throw new Error("geojson is required");if(void 0!==e.geometry)return e.geometry;if(e.coordinates||e.geometries)return e;throw new Error("geojson must be a valid Feature or Geometry Object")}function getGeomType(){throw new Error("invariant.getGeomType has been deprecated in v5.0 in favor of invariant.getType")}function getType(e,r){if(!e)throw new Error((r||"geojson")+" is required");if(e.geometry&&e.geometry.type)return e.geometry.type;if(e.type)return e.type;throw new Error((r||"geojson")+" is invalid")}Object.defineProperty(exports,"__esModule",{value:!0});var helpers=require("@turf/helpers");exports.getCoord=getCoord,exports.getCoords=getCoords,exports.containsNumber=containsNumber,exports.geojsonType=geojsonType,exports.featureOf=featureOf,exports.collectionOf=collectionOf,exports.getGeom=getGeom,exports.getGeomType=getGeomType,exports.getType=getType;
},{"@turf/helpers":10}],12:[function(require,module,exports){
"use strict";function clone(e){if(!e)throw new Error("geojson is required");switch(e.type){case"Feature":return cloneFeature(e);case"FeatureCollection":return cloneFeatureCollection(e);case"Point":case"LineString":case"Polygon":case"MultiPoint":case"MultiLineString":case"MultiPolygon":case"GeometryCollection":return cloneGeometry(e);default:throw new Error("unknown GeoJSON type")}}function cloneFeature(e){var t={type:"Feature"};return Object.keys(e).forEach(function(o){switch(o){case"type":case"properties":case"geometry":return;default:t[o]=e[o]}}),t.properties=cloneProperties(e.properties),t.geometry=cloneGeometry(e.geometry),t}function cloneProperties(e){var t={};return e?(Object.keys(e).forEach(function(o){var r=e[o];"object"==typeof r?null===r?t[o]=null:r.length?t[o]=r.map(function(e){return e}):t[o]=cloneProperties(r):t[o]=r}),t):t}function cloneFeatureCollection(e){var t={type:"FeatureCollection"};return Object.keys(e).forEach(function(o){switch(o){case"type":case"features":return;default:t[o]=e[o]}}),t.features=e.features.map(function(e){return cloneFeature(e)}),t}function cloneGeometry(e){var t={type:e.type};return e.bbox&&(t.bbox=e.bbox),"GeometryCollection"===e.type?(t.geometries=e.geometries.map(function(e){return cloneGeometry(e)}),t):(t.coordinates=deepSlice(e.coordinates),t)}function deepSlice(e){return"object"!=typeof e[0]?e.slice():e.map(function(e){return deepSlice(e)})}module.exports=clone,module.exports.default=clone;
},{}],13:[function(require,module,exports){
"use strict";function destination(e,s,a,r){void 0===r&&(r={});var t=invariant_1.getCoord(e),i=helpers_1.degreesToRadians(t[0]),n=helpers_1.degreesToRadians(t[1]),h=helpers_1.degreesToRadians(a),o=helpers_1.lengthToRadians(s,r.units),d=Math.asin(Math.sin(n)*Math.cos(o)+Math.cos(n)*Math.sin(o)*Math.cos(h)),p=i+Math.atan2(Math.sin(h)*Math.sin(o)*Math.cos(n),Math.cos(o)-Math.sin(n)*Math.sin(d)),M=helpers_1.radiansToDegrees(p),l=helpers_1.radiansToDegrees(d);return helpers_1.point([M,l],r.properties)}Object.defineProperty(exports,"__esModule",{value:!0});var helpers_1=require("@turf/helpers"),invariant_1=require("@turf/invariant");exports.default=destination;
},{"@turf/helpers":15,"@turf/invariant":16}],14:[function(require,module,exports){
"use strict";function distance(e,a,r){void 0===r&&(r={});var t=invariant_1.getCoord(e),s=invariant_1.getCoord(a),i=helpers_1.degreesToRadians(s[1]-t[1]),n=helpers_1.degreesToRadians(s[0]-t[0]),o=helpers_1.degreesToRadians(t[1]),d=helpers_1.degreesToRadians(s[1]),h=Math.pow(Math.sin(i/2),2)+Math.pow(Math.sin(n/2),2)*Math.cos(o)*Math.cos(d);return helpers_1.radiansToLength(2*Math.atan2(Math.sqrt(h),Math.sqrt(1-h)),r.units)}Object.defineProperty(exports,"__esModule",{value:!0});var invariant_1=require("@turf/invariant"),helpers_1=require("@turf/helpers");exports.default=distance;
},{"@turf/helpers":15,"@turf/invariant":16}],15:[function(require,module,exports){
"use strict";function feature(e,r,t){void 0===t&&(t={});var o={type:"Feature"};return(0===t.id||t.id)&&(o.id=t.id),t.bbox&&(o.bbox=t.bbox),o.properties=r||{},o.geometry=e,o}function geometry(e,r,t){switch(void 0===t&&(t={}),e){case"Point":return point(r).geometry;case"LineString":return lineString(r).geometry;case"Polygon":return polygon(r).geometry;case"MultiPoint":return multiPoint(r).geometry;case"MultiLineString":return multiLineString(r).geometry;case"MultiPolygon":return multiPolygon(r).geometry;default:throw new Error(e+" is invalid")}}function point(e,r,t){return void 0===t&&(t={}),feature({type:"Point",coordinates:e},r,t)}function points(e,r,t){return void 0===t&&(t={}),featureCollection(e.map(function(e){return point(e,r)}),t)}function polygon(e,r,t){void 0===t&&(t={});for(var o=0,n=e;o<n.length;o++){var i=n[o];if(i.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var s=0;s<i[i.length-1].length;s++)if(i[i.length-1][s]!==i[0][s])throw new Error("First and last Position are not equivalent.")}return feature({type:"Polygon",coordinates:e},r,t)}function polygons(e,r,t){return void 0===t&&(t={}),featureCollection(e.map(function(e){return polygon(e,r)}),t)}function lineString(e,r,t){if(void 0===t&&(t={}),e.length<2)throw new Error("coordinates must be an array of two or more positions");return feature({type:"LineString",coordinates:e},r,t)}function lineStrings(e,r,t){return void 0===t&&(t={}),featureCollection(e.map(function(e){return lineString(e,r)}),t)}function featureCollection(e,r){void 0===r&&(r={});var t={type:"FeatureCollection"};return r.id&&(t.id=r.id),r.bbox&&(t.bbox=r.bbox),t.features=e,t}function multiLineString(e,r,t){return void 0===t&&(t={}),feature({type:"MultiLineString",coordinates:e},r,t)}function multiPoint(e,r,t){return void 0===t&&(t={}),feature({type:"MultiPoint",coordinates:e},r,t)}function multiPolygon(e,r,t){return void 0===t&&(t={}),feature({type:"MultiPolygon",coordinates:e},r,t)}function geometryCollection(e,r,t){return void 0===t&&(t={}),feature({type:"GeometryCollection",geometries:e},r,t)}function round(e,r){if(void 0===r&&(r=0),r&&!(r>=0))throw new Error("precision must be a positive number");var t=Math.pow(10,r||0);return Math.round(e*t)/t}function radiansToLength(e,r){void 0===r&&(r="kilometers");var t=exports.factors[r];if(!t)throw new Error(r+" units is invalid");return e*t}function lengthToRadians(e,r){void 0===r&&(r="kilometers");var t=exports.factors[r];if(!t)throw new Error(r+" units is invalid");return e/t}function lengthToDegrees(e,r){return radiansToDegrees(lengthToRadians(e,r))}function bearingToAzimuth(e){var r=e%360;return r<0&&(r+=360),r}function radiansToDegrees(e){return e%(2*Math.PI)*180/Math.PI}function degreesToRadians(e){return e%360*Math.PI/180}function convertLength(e,r,t){if(void 0===r&&(r="kilometers"),void 0===t&&(t="kilometers"),!(e>=0))throw new Error("length must be a positive number");return radiansToLength(lengthToRadians(e,r),t)}function convertArea(e,r,t){if(void 0===r&&(r="meters"),void 0===t&&(t="kilometers"),!(e>=0))throw new Error("area must be a positive number");var o=exports.areaFactors[r];if(!o)throw new Error("invalid original units");var n=exports.areaFactors[t];if(!n)throw new Error("invalid final units");return e/o*n}function isNumber(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)}function isObject(e){return!!e&&e.constructor===Object}function validateBBox(e){if(!e)throw new Error("bbox is required");if(!Array.isArray(e))throw new Error("bbox must be an Array");if(4!==e.length&&6!==e.length)throw new Error("bbox must be an Array of 4 or 6 numbers");e.forEach(function(e){if(!isNumber(e))throw new Error("bbox must only contain numbers")})}function validateId(e){if(!e)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof e))throw new Error("id must be a number or a string")}function radians2degrees(){throw new Error("method has been renamed to `radiansToDegrees`")}function degrees2radians(){throw new Error("method has been renamed to `degreesToRadians`")}function distanceToDegrees(){throw new Error("method has been renamed to `lengthToDegrees`")}function distanceToRadians(){throw new Error("method has been renamed to `lengthToRadians`")}function radiansToDistance(){throw new Error("method has been renamed to `radiansToLength`")}function bearingToAngle(){throw new Error("method has been renamed to `bearingToAzimuth`")}function convertDistance(){throw new Error("method has been renamed to `convertLength`")}Object.defineProperty(exports,"__esModule",{value:!0}),exports.earthRadius=6371008.8,exports.factors={centimeters:100*exports.earthRadius,centimetres:100*exports.earthRadius,degrees:exports.earthRadius/111325,feet:3.28084*exports.earthRadius,inches:39.37*exports.earthRadius,kilometers:exports.earthRadius/1e3,kilometres:exports.earthRadius/1e3,meters:exports.earthRadius,metres:exports.earthRadius,miles:exports.earthRadius/1609.344,millimeters:1e3*exports.earthRadius,millimetres:1e3*exports.earthRadius,nauticalmiles:exports.earthRadius/1852,radians:1,yards:exports.earthRadius/1.0936},exports.unitsFactors={centimeters:100,centimetres:100,degrees:1/111325,feet:3.28084,inches:39.37,kilometers:.001,kilometres:.001,meters:1,metres:1,miles:1/1609.344,millimeters:1e3,millimetres:1e3,nauticalmiles:1/1852,radians:1/exports.earthRadius,yards:1/1.0936},exports.areaFactors={acres:247105e-9,centimeters:1e4,centimetres:1e4,feet:10.763910417,inches:1550.003100006,kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,miles:3.86e-7,millimeters:1e6,millimetres:1e6,yards:1.195990046},exports.feature=feature,exports.geometry=geometry,exports.point=point,exports.points=points,exports.polygon=polygon,exports.polygons=polygons,exports.lineString=lineString,exports.lineStrings=lineStrings,exports.featureCollection=featureCollection,exports.multiLineString=multiLineString,exports.multiPoint=multiPoint,exports.multiPolygon=multiPolygon,exports.geometryCollection=geometryCollection,exports.round=round,exports.radiansToLength=radiansToLength,exports.lengthToRadians=lengthToRadians,exports.lengthToDegrees=lengthToDegrees,exports.bearingToAzimuth=bearingToAzimuth,exports.radiansToDegrees=radiansToDegrees,exports.degreesToRadians=degreesToRadians,exports.convertLength=convertLength,exports.convertArea=convertArea,exports.isNumber=isNumber,exports.isObject=isObject,exports.validateBBox=validateBBox,exports.validateId=validateId,exports.radians2degrees=radians2degrees,exports.degrees2radians=degrees2radians,exports.distanceToDegrees=distanceToDegrees,exports.distanceToRadians=distanceToRadians,exports.radiansToDistance=radiansToDistance,exports.bearingToAngle=bearingToAngle,exports.convertDistance=convertDistance;
},{}],16:[function(require,module,exports){
arguments[4][11][0].apply(exports,arguments)
},{"@turf/helpers":15,"dup":11}],17:[function(require,module,exports){
"use strict";function lineIntersect(e,t){var r={},n=[];if("LineString"===e.type&&(e=helpers_1.feature(e)),"LineString"===t.type&&(t=helpers_1.feature(t)),"Feature"===e.type&&"Feature"===t.type&&null!==e.geometry&&null!==t.geometry&&"LineString"===e.geometry.type&&"LineString"===t.geometry.type&&2===e.geometry.coordinates.length&&2===t.geometry.coordinates.length){var i=intersects(e,t);return i&&n.push(i),helpers_1.featureCollection(n)}var o=geojson_rbush_1.default();return o.load(line_segment_1.default(t)),meta_1.featureEach(line_segment_1.default(e),function(e){meta_1.featureEach(o.search(e),function(t){var i=intersects(e,t);if(i){var o=invariant_1.getCoords(i).join(",");r[o]||(r[o]=!0,n.push(i))}})}),helpers_1.featureCollection(n)}function intersects(e,t){var r=invariant_1.getCoords(e),n=invariant_1.getCoords(t);if(2!==r.length)throw new Error("<intersects> line1 must only contain 2 coordinates");if(2!==n.length)throw new Error("<intersects> line2 must only contain 2 coordinates");var i=r[0][0],o=r[0][1],a=r[1][0],u=r[1][1],s=n[0][0],l=n[0][1],_=n[1][0],f=n[1][1],c=(f-l)*(a-i)-(_-s)*(u-o),g=(_-s)*(o-l)-(f-l)*(i-s),h=(a-i)*(o-l)-(u-o)*(i-s);if(0===c)return null;var p=g/c,m=h/c;if(p>=0&&p<=1&&m>=0&&m<=1){var v=i+p*(a-i),d=o+p*(u-o);return helpers_1.point([v,d])}return null}var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});var helpers_1=require("@turf/helpers"),invariant_1=require("@turf/invariant"),line_segment_1=__importDefault(require("@turf/line-segment")),meta_1=require("@turf/meta"),geojson_rbush_1=__importDefault(require("geojson-rbush"));exports.default=lineIntersect;
},{"@turf/helpers":15,"@turf/invariant":16,"@turf/line-segment":19,"@turf/meta":20,"geojson-rbush":29}],18:[function(require,module,exports){
"use strict";function lineOverlap(e,n,t){if(void 0===t&&(t={}),t=t||{},!helpers_1.isObject(t))throw new Error("options is invalid");var r=t.tolerance||0,o=[],i=geojson_rbush_1.default(),a=line_segment_1.default(e);i.load(a);var _;return meta_1.segmentEach(n,function(e){var n=!1;meta_1.featureEach(i.search(e),function(t){if(!1===n){var o=invariant_1.getCoords(e).sort(),i=invariant_1.getCoords(t).sort();equal(o,i)?(n=!0,_=_?concatSegment(_,e):e):(0===r?boolean_point_on_line_1.default(o[0],t)&&boolean_point_on_line_1.default(o[1],t):nearest_point_on_line_1.default(t,o[0]).properties.dist<=r&&nearest_point_on_line_1.default(t,o[1]).properties.dist<=r)?(n=!0,_=_?concatSegment(_,e):e):(0===r?boolean_point_on_line_1.default(i[0],e)&&boolean_point_on_line_1.default(i[1],e):nearest_point_on_line_1.default(e,i[0]).properties.dist<=r&&nearest_point_on_line_1.default(e,i[1]).properties.dist<=r)&&(_=_?concatSegment(_,t):t)}}),!1===n&&_&&(o.push(_),_=void 0)}),_&&o.push(_),helpers_1.featureCollection(o)}function concatSegment(e,n){var t=invariant_1.getCoords(n),r=invariant_1.getCoords(e),o=r[0],i=r[r.length-1],a=e.geometry.coordinates;return equal(t[0],o)?a.unshift(t[1]):equal(t[0],i)?a.push(t[1]):equal(t[1],o)?a.unshift(t[0]):equal(t[1],i)&&a.push(t[0]),e}Object.defineProperty(exports,"__esModule",{value:!0});var geojson_rbush_1=require("geojson-rbush"),line_segment_1=require("@turf/line-segment"),nearest_point_on_line_1=require("@turf/nearest-point-on-line"),boolean_point_on_line_1=require("@turf/boolean-point-on-line"),invariant_1=require("@turf/invariant"),meta_1=require("@turf/meta"),helpers_1=require("@turf/helpers"),equal=require("deep-equal");exports.default=lineOverlap;
},{"@turf/boolean-point-on-line":7,"@turf/helpers":15,"@turf/invariant":16,"@turf/line-segment":19,"@turf/meta":20,"@turf/nearest-point-on-line":21,"deep-equal":25,"geojson-rbush":29}],19:[function(require,module,exports){
"use strict";function lineSegment(e){if(!e)throw new Error("geojson is required");var r=[];return meta_1.flattenEach(e,function(e){lineSegmentFeature(e,r)}),helpers_1.featureCollection(r)}function lineSegmentFeature(e,r){var t=[],n=e.geometry;if(null!==n){switch(n.type){case"Polygon":t=invariant_1.getCoords(n);break;case"LineString":t=[invariant_1.getCoords(n)]}t.forEach(function(t){createSegments(t,e.properties).forEach(function(e){e.id=r.length,r.push(e)})})}}function createSegments(e,r){var t=[];return e.reduce(function(e,n){var i=helpers_1.lineString([e,n],r);return i.bbox=bbox(e,n),t.push(i),n}),t}function bbox(e,r){var t=e[0],n=e[1],i=r[0],a=r[1];return[t<i?t:i,n<a?n:a,t>i?t:i,n>a?n:a]}Object.defineProperty(exports,"__esModule",{value:!0});var helpers_1=require("@turf/helpers"),invariant_1=require("@turf/invariant"),meta_1=require("@turf/meta");exports.default=lineSegment;
},{"@turf/helpers":15,"@turf/invariant":16,"@turf/meta":20}],20:[function(require,module,exports){
"use strict";function coordEach(e,t,r){if(null!==e)for(var n,o,i,a,l,u,c,s,g=0,f=0,h=e.type,p="FeatureCollection"===h,d="Feature"===h,y=p?e.features.length:1,m=0;m<y;m++){c=p?e.features[m].geometry:d?e.geometry:e,s=!!c&&"GeometryCollection"===c.type,l=s?c.geometries.length:1;for(var v=0;v<l;v++){var E=0,P=0;if(null!==(a=s?c.geometries[v]:c)){u=a.coordinates;var w=a.type;switch(g=!r||"Polygon"!==w&&"MultiPolygon"!==w?0:1,w){case null:break;case"Point":if(!1===t(u,f,m,E,P))return!1;f++,E++;break;case"LineString":case"MultiPoint":for(n=0;n<u.length;n++){if(!1===t(u[n],f,m,E,P))return!1;f++,"MultiPoint"===w&&E++}"LineString"===w&&E++;break;case"Polygon":case"MultiLineString":for(n=0;n<u.length;n++){for(o=0;o<u[n].length-g;o++){if(!1===t(u[n][o],f,m,E,P))return!1;f++}"MultiLineString"===w&&E++,"Polygon"===w&&P++}"Polygon"===w&&E++;break;case"MultiPolygon":for(n=0;n<u.length;n++){for("MultiPolygon"===w&&(P=0),o=0;o<u[n].length;o++){for(i=0;i<u[n][o].length-g;i++){if(!1===t(u[n][o][i],f,m,E,P))return!1;f++}P++}E++}break;case"GeometryCollection":for(n=0;n<a.geometries.length;n++)if(!1===coordEach(a.geometries[n],t,r))return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function coordReduce(e,t,r,n){var o=r;return coordEach(e,function(e,n,i,a,l){o=0===n&&void 0===r?e:t(o,e,n,i,a,l)},n),o}function propEach(e,t){var r;switch(e.type){case"FeatureCollection":for(r=0;r<e.features.length&&!1!==t(e.features[r].properties,r);r++);break;case"Feature":t(e.properties,0)}}function propReduce(e,t,r){var n=r;return propEach(e,function(e,o){n=0===o&&void 0===r?e:t(n,e,o)}),n}function featureEach(e,t){if("Feature"===e.type)t(e,0);else if("FeatureCollection"===e.type)for(var r=0;r<e.features.length&&!1!==t(e.features[r],r);r++);}function featureReduce(e,t,r){var n=r;return featureEach(e,function(e,o){n=0===o&&void 0===r?e:t(n,e,o)}),n}function coordAll(e){var t=[];return coordEach(e,function(e){t.push(e)}),t}function geomEach(e,t){var r,n,o,i,a,l,u,c,s,g,f=0,h="FeatureCollection"===e.type,p="Feature"===e.type,d=h?e.features.length:1;for(r=0;r<d;r++){for(l=h?e.features[r].geometry:p?e.geometry:e,c=h?e.features[r].properties:p?e.properties:{},s=h?e.features[r].bbox:p?e.bbox:void 0,g=h?e.features[r].id:p?e.id:void 0,u=!!l&&"GeometryCollection"===l.type,a=u?l.geometries.length:1,o=0;o<a;o++)if(null!==(i=u?l.geometries[o]:l))switch(i.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":if(!1===t(i,f,c,s,g))return!1;break;case"GeometryCollection":for(n=0;n<i.geometries.length;n++)if(!1===t(i.geometries[n],f,c,s,g))return!1;break;default:throw new Error("Unknown Geometry Type")}else if(!1===t(null,f,c,s,g))return!1;f++}}function geomReduce(e,t,r){var n=r;return geomEach(e,function(e,o,i,a,l){n=0===o&&void 0===r?e:t(n,e,o,i,a,l)}),n}function flattenEach(e,t){geomEach(e,function(e,r,n,o,i){var a=null===e?null:e.type;switch(a){case null:case"Point":case"LineString":case"Polygon":if(!1===t(helpers.feature(e,n,{bbox:o,id:i}),r,0))return!1;return}var l;switch(a){case"MultiPoint":l="Point";break;case"MultiLineString":l="LineString";break;case"MultiPolygon":l="Polygon"}for(var u=0;u<e.coordinates.length;u++){var c=e.coordinates[u],s={type:l,coordinates:c};if(!1===t(helpers.feature(s,n),r,u))return!1}})}function flattenReduce(e,t,r){var n=r;return flattenEach(e,function(e,o,i){n=0===o&&0===i&&void 0===r?e:t(n,e,o,i)}),n}function segmentEach(e,t){flattenEach(e,function(e,r,n){var o=0;if(e.geometry){var i=e.geometry.type;if("Point"!==i&&"MultiPoint"!==i){var a;return!1!==coordEach(e,function(i,l,u,c,s){if(void 0===a)return void(a=i);var g=helpers.lineString([a,i],e.properties);if(!1===t(g,r,n,s,o))return!1;o++,a=i})&&void 0}}})}function segmentReduce(e,t,r){var n=r,o=!1;return segmentEach(e,function(e,i,a,l,u){n=!1===o&&void 0===r?e:t(n,e,i,a,l,u),o=!0}),n}function lineEach(e,t){if(!e)throw new Error("geojson is required");flattenEach(e,function(e,r,n){if(null!==e.geometry){var o=e.geometry.type,i=e.geometry.coordinates;switch(o){case"LineString":if(!1===t(e,r,n,0,0))return!1;break;case"Polygon":for(var a=0;a<i.length;a++)if(!1===t(helpers.lineString(i[a],e.properties),r,n,a))return!1}}})}function lineReduce(e,t,r){var n=r;return lineEach(e,function(e,o,i,a){n=0===o&&void 0===r?e:t(n,e,o,i,a)}),n}function findSegment(e,t){if(t=t||{},!helpers.isObject(t))throw new Error("options is invalid");var r,n=t.featureIndex||0,o=t.multiFeatureIndex||0,i=t.geometryIndex||0,a=t.segmentIndex||0,l=t.properties;switch(e.type){case"FeatureCollection":n<0&&(n=e.features.length+n),l=l||e.features[n].properties,r=e.features[n].geometry;break;case"Feature":l=l||e.properties,r=e.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":r=e;break;default:throw new Error("geojson is invalid")}if(null===r)return null;var u=r.coordinates;switch(r.type){case"Point":case"MultiPoint":return null;case"LineString":return a<0&&(a=u.length+a-1),helpers.lineString([u[a],u[a+1]],l,t);case"Polygon":return i<0&&(i=u.length+i),a<0&&(a=u[i].length+a-1),helpers.lineString([u[i][a],u[i][a+1]],l,t);case"MultiLineString":return o<0&&(o=u.length+o),a<0&&(a=u[o].length+a-1),helpers.lineString([u[o][a],u[o][a+1]],l,t);case"MultiPolygon":return o<0&&(o=u.length+o),i<0&&(i=u[o].length+i),a<0&&(a=u[o][i].length-a-1),helpers.lineString([u[o][i][a],u[o][i][a+1]],l,t)}throw new Error("geojson is invalid")}function findPoint(e,t){if(t=t||{},!helpers.isObject(t))throw new Error("options is invalid");var r,n=t.featureIndex||0,o=t.multiFeatureIndex||0,i=t.geometryIndex||0,a=t.coordIndex||0,l=t.properties;switch(e.type){case"FeatureCollection":n<0&&(n=e.features.length+n),l=l||e.features[n].properties,r=e.features[n].geometry;break;case"Feature":l=l||e.properties,r=e.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":r=e;break;default:throw new Error("geojson is invalid")}if(null===r)return null;var u=r.coordinates;switch(r.type){case"Point":return helpers.point(u,l,t);case"MultiPoint":return o<0&&(o=u.length+o),helpers.point(u[o],l,t);case"LineString":return a<0&&(a=u.length+a),helpers.point(u[a],l,t);case"Polygon":return i<0&&(i=u.length+i),a<0&&(a=u[i].length+a),helpers.point(u[i][a],l,t);case"MultiLineString":return o<0&&(o=u.length+o),a<0&&(a=u[o].length+a),helpers.point(u[o][a],l,t);case"MultiPolygon":return o<0&&(o=u.length+o),i<0&&(i=u[o].length+i),a<0&&(a=u[o][i].length-a),helpers.point(u[o][i][a],l,t)}throw new Error("geojson is invalid")}Object.defineProperty(exports,"__esModule",{value:!0});var helpers=require("@turf/helpers");exports.coordEach=coordEach,exports.coordReduce=coordReduce,exports.propEach=propEach,exports.propReduce=propReduce,exports.featureEach=featureEach,exports.featureReduce=featureReduce,exports.coordAll=coordAll,exports.geomEach=geomEach,exports.geomReduce=geomReduce,exports.flattenEach=flattenEach,exports.flattenReduce=flattenReduce,exports.segmentEach=segmentEach,exports.segmentReduce=segmentReduce,exports.lineEach=lineEach,exports.lineReduce=lineReduce,exports.findSegment=findSegment,exports.findPoint=findPoint;
},{"@turf/helpers":15}],21:[function(require,module,exports){
"use strict";function nearestPointOnLine(e,t,r){void 0===r&&(r={});var i=helpers_1.point([1/0,1/0],{dist:1/0}),n=0;return meta_1.flattenEach(e,function(e){for(var s=invariant_1.getCoords(e),a=0;a<s.length-1;a++){var o=helpers_1.point(s[a]);o.properties.dist=distance_1.default(t,o,r);var p=helpers_1.point(s[a+1]);p.properties.dist=distance_1.default(t,p,r);var d=distance_1.default(o,p,r),u=Math.max(o.properties.dist,p.properties.dist),l=bearing_1.default(o,p),_=destination_1.default(t,u,l+90,r),f=destination_1.default(t,u,l-90,r),c=line_intersect_1.default(helpers_1.lineString([_.geometry.coordinates,f.geometry.coordinates]),helpers_1.lineString([o.geometry.coordinates,p.geometry.coordinates])),g=null;c.features.length>0&&(g=c.features[0],g.properties.dist=distance_1.default(t,g,r),g.properties.location=n+distance_1.default(o,g,r)),o.properties.dist<i.properties.dist&&(i=o,i.properties.index=a,i.properties.location=n),p.properties.dist<i.properties.dist&&(i=p,i.properties.index=a+1,i.properties.location=n+d),g&&g.properties.dist<i.properties.dist&&(i=g,i.properties.index=a),n+=d}}),i}Object.defineProperty(exports,"__esModule",{value:!0});var bearing_1=require("@turf/bearing"),distance_1=require("@turf/distance"),destination_1=require("@turf/destination"),line_intersect_1=require("@turf/line-intersect"),meta_1=require("@turf/meta"),helpers_1=require("@turf/helpers"),invariant_1=require("@turf/invariant");exports.default=nearestPointOnLine;
},{"@turf/bearing":3,"@turf/destination":13,"@turf/distance":14,"@turf/helpers":15,"@turf/invariant":16,"@turf/line-intersect":17,"@turf/meta":20}],22:[function(require,module,exports){
"use strict";function _interopDefault(i){return i&&"object"==typeof i&&"default"in i?i.default:i}function getSqDist(i,e){var r=i.x-e.x,t=i.y-e.y;return r*r+t*t}function getSqSegDist(i,e,r){var t=e.x,n=e.y,o=r.x-t,u=r.y-n;if(0!==o||0!==u){var l=((i.x-t)*o+(i.y-n)*u)/(o*o+u*u);l>1?(t=r.x,n=r.y):l>0&&(t+=o*l,n+=u*l)}return o=i.x-t,u=i.y-n,o*o+u*u}function simplifyRadialDist(i,e){for(var r,t=i[0],n=[t],o=1,u=i.length;o<u;o++)r=i[o],getSqDist(r,t)>e&&(n.push(r),t=r);return t!==r&&n.push(r),n}function simplifyDPStep(i,e,r,t,n){for(var o,u=t,l=e+1;l<r;l++){var f=getSqSegDist(i[l],i[e],i[r]);f>u&&(o=l,u=f)}u>t&&(o-e>1&&simplifyDPStep(i,e,o,t,n),n.push(i[o]),r-o>1&&simplifyDPStep(i,o,r,t,n))}function simplifyDouglasPeucker(i,e){var r=i.length-1,t=[i[0]];return simplifyDPStep(i,0,r,e,t),t.push(i[r]),t}function simplify$2(i,e,r){if(i.length<=2)return i;var t=void 0!==e?e*e:1;return i=r?i:simplifyRadialDist(i,t),i=simplifyDouglasPeucker(i,t)}function simplify(i,e){if(e=e||{},!helpers.isObject(e))throw new Error("options is invalid");var r=void 0!==e.tolerance?e.tolerance:1,t=e.highQuality||!1,n=e.mutate||!1;if(!i)throw new Error("geojson is required");if(r&&r<0)throw new Error("invalid tolerance");return!0!==n&&(i=clone(i)),meta.geomEach(i,function(i){simplifyGeom(i,r,t)}),i}function simplifyGeom(i,e,r){var t=i.type;if("Point"===t||"MultiPoint"===t)return i;cleanCoords(i,!0);var n=i.coordinates;switch(t){case"LineString":i.coordinates=simplifyLine(n,e,r);break;case"MultiLineString":i.coordinates=n.map(function(i){return simplifyLine(i,e,r)});break;case"Polygon":i.coordinates=simplifyPolygon(n,e,r);break;case"MultiPolygon":i.coordinates=n.map(function(i){return simplifyPolygon(i,e,r)})}return i}function simplifyLine(i,e,r){return simplify$2(i.map(function(i){return{x:i[0],y:i[1],z:i[2]}}),e,r).map(function(i){return i.z?[i.x,i.y,i.z]:[i.x,i.y]})}function simplifyPolygon(i,e,r){return i.map(function(i){var t=i.map(function(i){return{x:i[0],y:i[1]}});if(t.length<4)throw new Error("invalid polygon");for(var n=simplify$2(t,e,r).map(function(i){return[i.x,i.y]});!checkValidity(n);)e-=.01*e,n=simplify$2(t,e,r).map(function(i){return[i.x,i.y]});return n[n.length-1][0]===n[0][0]&&n[n.length-1][1]===n[0][1]||n.push(n[0]),n})}function checkValidity(i){return!(i.length<3)&&!(3===i.length&&i[2][0]===i[0][0]&&i[2][1]===i[0][1])}var cleanCoords=_interopDefault(require("@turf/clean-coords")),clone=_interopDefault(require("@turf/clone")),meta=require("@turf/meta"),helpers=require("@turf/helpers");module.exports=simplify,module.exports.default=simplify;
},{"@turf/clean-coords":9,"@turf/clone":12,"@turf/helpers":23,"@turf/meta":24}],23:[function(require,module,exports){
arguments[4][10][0].apply(exports,arguments)
},{"dup":10}],24:[function(require,module,exports){
arguments[4][20][0].apply(exports,arguments)
},{"@turf/helpers":23,"dup":20}],25:[function(require,module,exports){
function isUndefinedOrNull(e){return null===e||void 0===e}function isBuffer(e){return!(!e||"object"!=typeof e||"number"!=typeof e.length)&&("function"==typeof e.copy&&"function"==typeof e.slice&&!(e.length>0&&"number"!=typeof e[0]))}function objEquiv(e,t,r){var n,i;if(isUndefinedOrNull(e)||isUndefinedOrNull(t))return!1;if(e.prototype!==t.prototype)return!1;if(isArguments(e))return!!isArguments(t)&&(e=pSlice.call(e),t=pSlice.call(t),deepEqual(e,t,r));if(isBuffer(e)){if(!isBuffer(t))return!1;if(e.length!==t.length)return!1;for(n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}try{var u=objectKeys(e),o=objectKeys(t)}catch(e){return!1}if(u.length!=o.length)return!1;for(u.sort(),o.sort(),n=u.length-1;n>=0;n--)if(u[n]!=o[n])return!1;for(n=u.length-1;n>=0;n--)if(i=u[n],!deepEqual(e[i],t[i],r))return!1;return typeof e==typeof t}var pSlice=Array.prototype.slice,objectKeys=require("./lib/keys.js"),isArguments=require("./lib/is_arguments.js"),deepEqual=module.exports=function(e,t,r){return r||(r={}),e===t||(e instanceof Date&&t instanceof Date?e.getTime()===t.getTime():!e||!t||"object"!=typeof e&&"object"!=typeof t?r.strict?e===t:e==t:objEquiv(e,t,r))};
},{"./lib/is_arguments.js":26,"./lib/keys.js":27}],26:[function(require,module,exports){
function supported(t){return"[object Arguments]"==Object.prototype.toString.call(t)}function unsupported(t){return t&&"object"==typeof t&&"number"==typeof t.length&&Object.prototype.hasOwnProperty.call(t,"callee")&&!Object.prototype.propertyIsEnumerable.call(t,"callee")||!1}var supportsArgumentsClass="[object Arguments]"==function(){return Object.prototype.toString.call(arguments)}();exports=module.exports=supportsArgumentsClass?supported:unsupported,exports.supported=supported,exports.unsupported=unsupported;
},{}],27:[function(require,module,exports){
function shim(e){var s=[];for(var t in e)s.push(t);return s}exports=module.exports="function"==typeof Object.keys?Object.keys:shim,exports.shim=shim;
},{}],28:[function(require,module,exports){
function explode(e){return e.coordinates.map(function(t){return{type:e.type.replace("Multi",""),coordinates:t}})}function sameLength(e,t){return e.hasOwnProperty("coordinates")?e.coordinates.length===t.coordinates.length:e.length===t.length}function objectComparator(e,t){return deepEqual(e,t,{strict:!0})}var deepEqual=require("deep-equal"),Equality=function(e){this.precision=e&&e.precision?e.precision:17,this.direction=!(!e||!e.direction)&&e.direction,this.pseudoNode=!(!e||!e.pseudoNode)&&e.pseudoNode,this.objectComparator=e&&e.objectComparator?e.objectComparator:objectComparator};Equality.prototype.compare=function(e,t){if(e.type!==t.type||!sameLength(e,t))return!1;switch(e.type){case"Point":return this.compareCoord(e.coordinates,t.coordinates);case"LineString":return this.compareLine(e.coordinates,t.coordinates,0,!1);case"Polygon":return this.comparePolygon(e,t);case"Feature":return this.compareFeature(e,t);default:if(0===e.type.indexOf("Multi")){var o=this,r=explode(e),i=explode(t);return r.every(function(e){return this.some(function(t){return o.compare(e,t)})},i)}}return!1},Equality.prototype.compareCoord=function(e,t){if(e.length!==t.length)return!1;for(var o=0;o<e.length;o++)if(e[o].toFixed(this.precision)!==t[o].toFixed(this.precision))return!1;return!0},Equality.prototype.compareLine=function(e,t,o,r){if(!sameLength(e,t))return!1;var i=this.pseudoNode?e:this.removePseudo(e),n=this.pseudoNode?t:this.removePseudo(t);if(!r||this.compareCoord(i[0],n[0])||(n=this.fixStartIndex(n,i))){var a=this.compareCoord(i[o],n[o]);return this.direction||a?this.comparePath(i,n):!!this.compareCoord(i[o],n[n.length-(1+o)])&&this.comparePath(i.slice().reverse(),n)}},Equality.prototype.fixStartIndex=function(e,t){for(var o,r=-1,i=0;i<e.length;i++)if(this.compareCoord(e[i],t[0])){r=i;break}return r>=0&&(o=[].concat(e.slice(r,e.length),e.slice(1,r+1))),o},Equality.prototype.comparePath=function(e,t){var o=this;return e.every(function(e,t){return o.compareCoord(e,this[t])},t)},Equality.prototype.comparePolygon=function(e,t){if(this.compareLine(e.coordinates[0],t.coordinates[0],1,!0)){var o=e.coordinates.slice(1,e.coordinates.length),r=t.coordinates.slice(1,t.coordinates.length),i=this;return o.every(function(e){return this.some(function(t){return i.compareLine(e,t,1,!0)})},r)}return!1},Equality.prototype.compareFeature=function(e,t){return!(e.id!==t.id||!this.objectComparator(e.properties,t.properties)||!this.compareBBox(e,t))&&this.compare(e.geometry,t.geometry)},Equality.prototype.compareBBox=function(e,t){return!!(!e.bbox&&!t.bbox||e.bbox&&t.bbox&&this.compareCoord(e.bbox,t.bbox))},Equality.prototype.removePseudo=function(e){return e},module.exports=Equality;
},{"deep-equal":25}],29:[function(require,module,exports){
function geojsonRbush(r){var e=rbush(r);return e.insert=function(r){if("Feature"!==r.type)throw new Error("invalid feature");return r.bbox=r.bbox?r.bbox:turfBBox(r),rbush.prototype.insert.call(this,r)},e.load=function(r){var e=[];return Array.isArray(r)?r.forEach(function(r){if("Feature"!==r.type)throw new Error("invalid features");r.bbox=r.bbox?r.bbox:turfBBox(r),e.push(r)}):featureEach(r,function(r){if("Feature"!==r.type)throw new Error("invalid features");r.bbox=r.bbox?r.bbox:turfBBox(r),e.push(r)}),rbush.prototype.load.call(this,e)},e.remove=function(r,e){if("Feature"!==r.type)throw new Error("invalid feature");return r.bbox=r.bbox?r.bbox:turfBBox(r),rbush.prototype.remove.call(this,r,e)},e.clear=function(){return rbush.prototype.clear.call(this)},e.search=function(r){var e=rbush.prototype.search.call(this,this.toBBox(r));return featureCollection(e)},e.collides=function(r){return rbush.prototype.collides.call(this,this.toBBox(r))},e.all=function(){var r=rbush.prototype.all.call(this);return featureCollection(r)},e.toJSON=function(){return rbush.prototype.toJSON.call(this)},e.fromJSON=function(r){return rbush.prototype.fromJSON.call(this,r)},e.toBBox=function(r){var e;if(r.bbox)e=r.bbox;else if(Array.isArray(r)&&4===r.length)e=r;else if(Array.isArray(r)&&6===r.length)e=[r[0],r[1],r[3],r[4]];else if("Feature"===r.type)e=turfBBox(r);else{if("FeatureCollection"!==r.type)throw new Error("invalid geojson");e=turfBBox(r)}return{minX:e[0],minY:e[1],maxX:e[2],maxY:e[3]}},e}var rbush=require("rbush"),helpers=require("@turf/helpers"),meta=require("@turf/meta"),turfBBox=require("@turf/bbox").default,featureEach=meta.featureEach,coordEach=meta.coordEach,polygon=helpers.polygon,featureCollection=helpers.featureCollection;module.exports=geojsonRbush,module.exports.default=geojsonRbush;
},{"@turf/bbox":2,"@turf/helpers":15,"@turf/meta":20,"rbush":30}],30:[function(require,module,exports){
"use strict";function rbush(t,i){if(!(this instanceof rbush))return new rbush(t,i);this._maxEntries=Math.max(4,t||9),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),i&&this._initFormat(i),this.clear()}function findItem(t,i,n){if(!n)return i.indexOf(t);for(var e=0;e<i.length;e++)if(n(t,i[e]))return e;return-1}function calcBBox(t,i){distBBox(t,0,t.children.length,i,t)}function distBBox(t,i,n,e,r){r||(r=createNode(null)),r.minX=1/0,r.minY=1/0,r.maxX=-1/0,r.maxY=-1/0;for(var a,h=i;h<n;h++)a=t.children[h],extend(r,t.leaf?e(a):a);return r}function extend(t,i){return t.minX=Math.min(t.minX,i.minX),t.minY=Math.min(t.minY,i.minY),t.maxX=Math.max(t.maxX,i.maxX),t.maxY=Math.max(t.maxY,i.maxY),t}function compareNodeMinX(t,i){return t.minX-i.minX}function compareNodeMinY(t,i){return t.minY-i.minY}function bboxArea(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function bboxMargin(t){return t.maxX-t.minX+(t.maxY-t.minY)}function enlargedArea(t,i){return(Math.max(i.maxX,t.maxX)-Math.min(i.minX,t.minX))*(Math.max(i.maxY,t.maxY)-Math.min(i.minY,t.minY))}function intersectionArea(t,i){var n=Math.max(t.minX,i.minX),e=Math.max(t.minY,i.minY),r=Math.min(t.maxX,i.maxX),a=Math.min(t.maxY,i.maxY);return Math.max(0,r-n)*Math.max(0,a-e)}function contains(t,i){return t.minX<=i.minX&&t.minY<=i.minY&&i.maxX<=t.maxX&&i.maxY<=t.maxY}function intersects(t,i){return i.minX<=t.maxX&&i.minY<=t.maxY&&i.maxX>=t.minX&&i.maxY>=t.minY}function createNode(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function multiSelect(t,i,n,e,r){for(var a,h=[i,n];h.length;)n=h.pop(),i=h.pop(),n-i<=e||(a=i+Math.ceil((n-i)/e/2)*e,quickselect(t,a,i,n,r),h.push(i,a,a,n))}module.exports=rbush,module.exports.default=rbush;var quickselect=require("quickselect");rbush.prototype={all:function(){return this._all(this.data,[])},search:function(t){var i=this.data,n=[],e=this.toBBox;if(!intersects(t,i))return n;for(var r,a,h,o,s=[];i;){for(r=0,a=i.children.length;r<a;r++)h=i.children[r],o=i.leaf?e(h):h,intersects(t,o)&&(i.leaf?n.push(h):contains(t,o)?this._all(h,n):s.push(h));i=s.pop()}return n},collides:function(t){var i=this.data,n=this.toBBox;if(!intersects(t,i))return!1;for(var e,r,a,h,o=[];i;){for(e=0,r=i.children.length;e<r;e++)if(a=i.children[e],h=i.leaf?n(a):a,intersects(t,h)){if(i.leaf||contains(t,h))return!0;o.push(a)}i=o.pop()}return!1},load:function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var i=0,n=t.length;i<n;i++)this.insert(t[i]);return this}var e=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===e.height)this._splitRoot(this.data,e);else{if(this.data.height<e.height){var r=this.data;this.data=e,e=r}this._insert(e,this.data.height-e.height-1,!0)}else this.data=e;return this},insert:function(t){return t&&this._insert(t,this.data.height-1),this},clear:function(){return this.data=createNode([]),this},remove:function(t,i){if(!t)return this;for(var n,e,r,a,h=this.data,o=this.toBBox(t),s=[],c=[];h||s.length;){if(h||(h=s.pop(),e=s[s.length-1],n=c.pop(),a=!0),h.leaf&&-1!==(r=findItem(t,h.children,i)))return h.children.splice(r,1),s.push(h),this._condense(s),this;a||h.leaf||!contains(h,o)?e?(n++,h=e.children[n],a=!1):h=null:(s.push(h),c.push(n),n=0,e=h,h=h.children[0])}return this},toBBox:function(t){return t},compareMinX:compareNodeMinX,compareMinY:compareNodeMinY,toJSON:function(){return this.data},fromJSON:function(t){return this.data=t,this},_all:function(t,i){for(var n=[];t;)t.leaf?i.push.apply(i,t.children):n.push.apply(n,t.children),t=n.pop();return i},_build:function(t,i,n,e){var r,a=n-i+1,h=this._maxEntries;if(a<=h)return r=createNode(t.slice(i,n+1)),calcBBox(r,this.toBBox),r;e||(e=Math.ceil(Math.log(a)/Math.log(h)),h=Math.ceil(a/Math.pow(h,e-1))),r=createNode([]),r.leaf=!1,r.height=e;var o,s,c,l,u=Math.ceil(a/h),m=u*Math.ceil(Math.sqrt(h));for(multiSelect(t,i,n,m,this.compareMinX),o=i;o<=n;o+=m)for(c=Math.min(o+m-1,n),multiSelect(t,o,c,u,this.compareMinY),s=o;s<=c;s+=u)l=Math.min(s+u-1,c),r.children.push(this._build(t,s,l,e-1));return calcBBox(r,this.toBBox),r},_chooseSubtree:function(t,i,n,e){for(var r,a,h,o,s,c,l,u;;){if(e.push(i),i.leaf||e.length-1===n)break;for(l=u=1/0,r=0,a=i.children.length;r<a;r++)h=i.children[r],s=bboxArea(h),c=enlargedArea(t,h)-s,c<u?(u=c,l=s<l?s:l,o=h):c===u&&s<l&&(l=s,o=h);i=o||i.children[0]}return i},_insert:function(t,i,n){var e=this.toBBox,r=n?t:e(t),a=[],h=this._chooseSubtree(r,this.data,i,a);for(h.children.push(t),extend(h,r);i>=0&&a[i].children.length>this._maxEntries;)this._split(a,i),i--;this._adjustParentBBoxes(r,a,i)},_split:function(t,i){var n=t[i],e=n.children.length,r=this._minEntries;this._chooseSplitAxis(n,r,e);var a=this._chooseSplitIndex(n,r,e),h=createNode(n.children.splice(a,n.children.length-a));h.height=n.height,h.leaf=n.leaf,calcBBox(n,this.toBBox),calcBBox(h,this.toBBox),i?t[i-1].children.push(h):this._splitRoot(n,h)},_splitRoot:function(t,i){this.data=createNode([t,i]),this.data.height=t.height+1,this.data.leaf=!1,calcBBox(this.data,this.toBBox)},_chooseSplitIndex:function(t,i,n){var e,r,a,h,o,s,c,l;for(s=c=1/0,e=i;e<=n-i;e++)r=distBBox(t,0,e,this.toBBox),a=distBBox(t,e,n,this.toBBox),h=intersectionArea(r,a),o=bboxArea(r)+bboxArea(a),h<s?(s=h,l=e,c=o<c?o:c):h===s&&o<c&&(c=o,l=e);return l},_chooseSplitAxis:function(t,i,n){var e=t.leaf?this.compareMinX:compareNodeMinX,r=t.leaf?this.compareMinY:compareNodeMinY;this._allDistMargin(t,i,n,e)<this._allDistMargin(t,i,n,r)&&t.children.sort(e)},_allDistMargin:function(t,i,n,e){t.children.sort(e);var r,a,h=this.toBBox,o=distBBox(t,0,i,h),s=distBBox(t,n-i,n,h),c=bboxMargin(o)+bboxMargin(s);for(r=i;r<n-i;r++)a=t.children[r],extend(o,t.leaf?h(a):a),c+=bboxMargin(o);for(r=n-i-1;r>=i;r--)a=t.children[r],extend(s,t.leaf?h(a):a),c+=bboxMargin(s);return c},_adjustParentBBoxes:function(t,i,n){for(var e=n;e>=0;e--)extend(i[e],t)},_condense:function(t){for(var i,n=t.length-1;n>=0;n--)0===t[n].children.length?n>0?(i=t[n-1].children,i.splice(i.indexOf(t[n]),1)):this.clear():calcBBox(t[n],this.toBBox)},_initFormat:function(t){var i=["return a"," - b",";"];this.compareMinX=new Function("a","b",i.join(t[0])),this.compareMinY=new Function("a","b",i.join(t[1])),this.toBBox=new Function("a","return {minX: a"+t[0]+", minY: a"+t[1]+", maxX: a"+t[2]+", maxY: a"+t[3]+"};")}};
},{"quickselect":31}],31:[function(require,module,exports){
!function(t,o){"object"==typeof exports&&"undefined"!=typeof module?module.exports=o():"function"==typeof define&&define.amd?define(o):t.quickselect=o()}(this,function(){"use strict";function t(t,e,f,r,i){o(t,e,f||0,r||t.length-1,i||n)}function o(t,n,f,r,i){for(;r>f;){if(r-f>600){var u=r-f+1,a=n-f+1,c=Math.log(u),h=.5*Math.exp(2*c/3),d=.5*Math.sqrt(c*h*(u-h)/u)*(a-u/2<0?-1:1);o(t,n,Math.max(f,Math.floor(n-a*h/u+d)),Math.min(r,Math.floor(n+(u-a)*h/u+d)),i)}var l=t[n],s=f,M=r;for(e(t,f,n),i(t[r],l)>0&&e(t,f,r);s<M;){for(e(t,s,M),s++,M--;i(t[s],l)<0;)s++;for(;i(t[M],l)>0;)M--}0===i(t[f],l)?e(t,f,M):(M++,e(t,M,r)),M<=n&&(f=M+1),n<=M&&(r=M-1)}}function e(t,o,e){var n=t[o];t[o]=t[e],t[e]=n}function n(t,o){return t<o?-1:t>o?1:0}return t});
},{}],32:[function(require,module,exports){
module.exports={bboxPolygon:require("@turf/bbox-polygon").default,helpers:require("@turf/helpers"),meta:require("@turf/meta"),bbox:require("@turf/bbox").default,center:require("@turf/center").default,booleanContains:require("@turf/boolean-contains").default,booleanOverlap:require("@turf/boolean-overlap").default,simplify:require("@turf/simplify").default};
},{"@turf/bbox":2,"@turf/bbox-polygon":1,"@turf/boolean-contains":4,"@turf/boolean-overlap":5,"@turf/center":8,"@turf/helpers":15,"@turf/meta":20,"@turf/simplify":22}]},{},[32])(32)
});


<<<<<<< HEAD
//# sourceMappingURL=bundle.mapAYO,EAAOwF,GAAmB8B,GAAetH,EAAOwF,GAAmB8B,EAAe,IAAKvJ,EAAYd,EAClI,KAAK,eAID,MAHIuI,GAAoB,IAAGA,EAAoBxF,EAAOzC,OAASiI,GAC3DC,EAAgB,IAAGA,EAAgBzF,EAAOwF,GAAmBjI,OAASkI,GACtE6B,EAAe,IAAGA,EAAetH,EAAOwF,GAAmBC,GAAelI,OAAS+J,EAAe,GAC/FL,QAAQxH,YAAYO,EAAOwF,GAAmBC,GAAe6B,GAAetH,EAAOwF,GAAmBC,GAAe6B,EAAe,IAAKvJ,EAAYd,GAEhK,KAAM,IAAIO,OAAM,sBAoCpB,QAASyK,WAAU1J,EAAStB,GAGxB,GADAA,EAAUA,OACLgK,QAAQrE,SAAS3F,GAAU,KAAM,IAAIO,OAAM,qBAChD,IAOI+B,GAPA+F,EAAerI,EAAQqI,cAAgB,EACvCE,EAAoBvI,EAAQuI,mBAAqB,EACjDC,EAAgBxI,EAAQwI,eAAiB,EACzCP,EAAajI,EAAQiI,YAAc,EAGnCnH,EAAad,EAAQc,UAGzB,QAAQQ,EAAQe,MAChB,IAAK,oBACGgG,EAAe,IAAGA,EAAe/G,EAAQgC,SAAShD,OAAS+H,GAC/DvH,EAAaA,GAAcQ,EAAQgC,SAAS+E,GAAcvH,WAC1DwB,EAAWhB,EAAQgC,SAAS+E,GAAc/F,QAC1C,MACJ,KAAK,UACDxB,EAAaA,GAAcQ,EAAQR,WACnCwB,EAAWhB,EAAQgB,QACnB,MACJ,KAAK,QACL,IAAK,aACD,MAAO,KACX,KAAK,aACL,IAAK,UACL,IAAK,kBACL,IAAK,eACDA,EAAWhB,CACX,MACJ,SACI,KAAM,IAAIf,OAAM,sBAIpB,GAAiB,OAAb+B,EAAmB,MAAO,KAC9B,IAAIS,GAAST,EAASC,WACtB,QAAQD,EAASD,MACjB,IAAK,QACD,MAAO2H,SAAQ/H,MAAMc,EAAQjC,EAAYd,EAC7C,KAAK,aAED,MADIuI,GAAoB,IAAGA,EAAoBxF,EAAOzC,OAASiI,GACxDyB,QAAQ/H,MAAMc,EAAOwF,GAAoBzH,EAAYd,EAChE,KAAK,aAED,MADIiI,GAAa,IAAGA,EAAalF,EAAOzC,OAAS2H,GAC1C+B,QAAQ/H,MAAMc,EAAOkF,GAAanH,EAAYd,EACzD,KAAK,UAGD,MAFIwI,GAAgB,IAAGA,EAAgBzF,EAAOzC,OAASkI,GACnDP,EAAa,IAAGA,EAAalF,EAAOyF,GAAelI,OAAS2H,GACzD+B,QAAQ/H,MAAMc,EAAOyF,GAAeP,GAAanH,EAAYd,EACxE,KAAK,kBAGD,MAFIuI,GAAoB,IAAGA,EAAoBxF,EAAOzC,OAASiI,GAC3DN,EAAa,IAAGA,EAAalF,EAAOwF,GAAmBjI,OAAS2H,GAC7D+B,QAAQ/H,MAAMc,EAAOwF,GAAmBN,GAAanH,EAAYd,EAC5E,KAAK,eAID,MAHIuI,GAAoB,IAAGA,EAAoBxF,EAAOzC,OAASiI,GAC3DC,EAAgB,IAAGA,EAAgBzF,EAAOwF,GAAmBjI,OAASkI,GACtEP,EAAa,IAAGA,EAAalF,EAAOwF,GAAmBC,GAAelI,OAAS2H,GAC5E+B,QAAQ/H,MAAMc,EAAOwF,GAAmBC,GAAeP,GAAanH,EAAYd,GAE3F,KAAM,IAAIO,OAAM,sBA/kCpBS,OAAOC,eAAeC,QAAS,cAAgBC,OAAO,GAEtD,IAAI6I,SAAU5I,QAAQ,gBAglCtBF,SAAQQ,UAAYA,UACpBR,QAAQwH,YAAcA,YACtBxH,QAAQ6H,SAAWA,SACnB7H,QAAQ+H,WAAaA,WACrB/H,QAAQiI,YAAcA,YACtBjI,QAAQkI,cAAgBA,cACxBlI,QAAQoI,SAAWA,SACnBpI,QAAQsI,SAAWA,SACnBtI,QAAQ2I,WAAaA,WACrB3I,QAAQ6I,YAAcA,YACtB7I,QAAQgJ,cAAgBA,cACxBhJ,QAAQiJ,YAAcA,YACtBjJ,QAAQwJ,cAAgBA,cACxBxJ,QAAQ0J,SAAWA,SACnB1J,QAAQ2J,WAAaA,WACrB3J,QAAQ6J,YAAcA,YACtB7J,QAAQ8J,UAAYA;;ACpmCpBC,OAAO/J,SACHpB,YAAasB,QAAQ,sBAAsBC,QAC3C2I,QAAS5I,QAAQ,iBACjB8J,KAAM9J,QAAQ,cACdrB,KAAMqB,QAAQ,cAAcC,QAC5BO,OAAQR,QAAQ,gBAAgBC","file":"bundle.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar helpers_1 = require(\"@turf/helpers\");\n/**\n * Takes a bbox and returns an equivalent {@link Polygon|polygon}.\n *\n * @name bboxPolygon\n * @param {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @param {Object} [options={}] Optional parameters\n * @param {Properties} [options.properties={}] Translate properties to Polygon\n * @param {string|number} [options.id={}] Translate Id to Polygon\n * @returns {Feature<Polygon>} a Polygon representation of the bounding box\n * @example\n * var bbox = [0, 0, 10, 10];\n *\n * var poly = turf.bboxPolygon(bbox);\n *\n * //addToMap\n * var addToMap = [poly]\n */\nfunction bboxPolygon(bbox, options) {\n    if (options === void 0) { options = {}; }\n    // Convert BBox positions to Numbers\n    // No performance loss for including Number()\n    // https://github.com/Turfjs/turf/issues/1119\n    var west = Number(bbox[0]);\n    var south = Number(bbox[1]);\n    var east = Number(bbox[2]);\n    var north = Number(bbox[3]);\n    if (bbox.length === 6) {\n        throw new Error(\"@turf/bbox-polygon does not support BBox with 6 positions\");\n    }\n    var lowLeft = [west, south];\n    var topLeft = [west, north];\n    var topRight = [east, north];\n    var lowRight = [east, south];\n    return helpers_1.polygon([[\n            lowLeft,\n            lowRight,\n            topRight,\n            topLeft,\n            lowLeft,\n        ]], options.properties, { bbox: bbox, id: options.id });\n}\nexports.default = bboxPolygon;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar meta_1 = require(\"@turf/meta\");\n/**\n * Takes a set of features, calculates the bbox of all input features, and returns a bounding box.\n *\n * @name bbox\n * @param {GeoJSON} geojson any GeoJSON object\n * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\n * var bbox = turf.bbox(line);\n * var bboxPolygon = turf.bboxPolygon(bbox);\n *\n * //addToMap\n * var addToMap = [line, bboxPolygon]\n */\nfunction bbox(geojson) {\n    var result = [Infinity, Infinity, -Infinity, -Infinity];\n    meta_1.coordEach(geojson, function (coord) {\n        if (result[0] > coord[0]) {\n            result[0] = coord[0];\n        }\n        if (result[1] > coord[1]) {\n            result[1] = coord[1];\n        }\n        if (result[2] < coord[0]) {\n            result[2] = coord[0];\n        }\n        if (result[3] < coord[1]) {\n            result[3] = coord[1];\n        }\n    });\n    return result;\n}\nexports.default = bbox;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bbox_1 = require(\"@turf/bbox\");\nvar helpers_1 = require(\"@turf/helpers\");\n/**\n * Takes a {@link Feature} or {@link FeatureCollection} and returns the absolute center point of all features.\n *\n * @name center\n * @param {GeoJSON} geojson GeoJSON to be centered\n * @param {Object} [options={}] Optional parameters\n * @param {Object} [options.properties={}] Translate GeoJSON Properties to Point\n * @param {Object} [options.bbox={}] Translate GeoJSON BBox to Point\n * @param {Object} [options.id={}] Translate GeoJSON Id to Point\n * @returns {Feature<Point>} a Point feature at the absolute center point of all input features\n * @example\n * var features = turf.points([\n *   [-97.522259, 35.4691],\n *   [-97.502754, 35.463455],\n *   [-97.508269, 35.463245]\n * ]);\n *\n * var center = turf.center(features);\n *\n * //addToMap\n * var addToMap = [features, center]\n * center.properties['marker-size'] = 'large';\n * center.properties['marker-color'] = '#000';\n */\nfunction center(geojson, options) {\n    if (options === void 0) { options = {}; }\n    var ext = bbox_1.default(geojson);\n    var x = (ext[0] + ext[2]) / 2;\n    var y = (ext[1] + ext[3]) / 2;\n    return helpers_1.point([x, y], options.properties, options);\n}\nexports.default = center;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexports.earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.factors = {\n    centimeters: exports.earthRadius * 100,\n    centimetres: exports.earthRadius * 100,\n    degrees: exports.earthRadius / 111325,\n    feet: exports.earthRadius * 3.28084,\n    inches: exports.earthRadius * 39.370,\n    kilometers: exports.earthRadius / 1000,\n    kilometres: exports.earthRadius / 1000,\n    meters: exports.earthRadius,\n    metres: exports.earthRadius,\n    miles: exports.earthRadius / 1609.344,\n    millimeters: exports.earthRadius * 1000,\n    millimetres: exports.earthRadius * 1000,\n    nauticalmiles: exports.earthRadius / 1852,\n    radians: 1,\n    yards: exports.earthRadius / 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.370,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / exports.earthRadius,\n    yards: 1 / 1.0936,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\nexports.feature = feature;\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nfunction geometry(type, coordinates, options) {\n    if (options === void 0) { options = {}; }\n    switch (type) {\n        case \"Point\": return point(coordinates).geometry;\n        case \"LineString\": return lineString(coordinates).geometry;\n        case \"Polygon\": return polygon(coordinates).geometry;\n        case \"MultiPoint\": return multiPoint(coordinates).geometry;\n        case \"MultiLineString\": return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\": return multiPolygon(coordinates).geometry;\n        default: throw new Error(type + \" is invalid\");\n    }\n}\nexports.geometry = geometry;\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.point = point;\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\nexports.points = points;\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.polygon = polygon;\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\nexports.polygons = polygons;\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.lineString = lineString;\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\nexports.lineStrings = lineStrings;\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\nexports.featureCollection = featureCollection;\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiLineString = multiLineString;\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPoint = multiPoint;\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPolygon = multiPolygon;\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\nexports.geometryCollection = geometryCollection;\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\nexports.round = round;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\nexports.radiansToLength = radiansToLength;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\nexports.lengthToRadians = lengthToRadians;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\nexports.lengthToDegrees = lengthToDegrees;\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\nexports.bearingToAzimuth = bearingToAzimuth;\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return degrees * 180 / Math.PI;\n}\nexports.radiansToDegrees = radiansToDegrees;\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return radians * Math.PI / 180;\n}\nexports.degreesToRadians = degreesToRadians;\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\nexports.convertLength = convertLength;\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted distance\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = exports.areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = exports.areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\nexports.convertArea = convertArea;\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\nexports.isNumber = isNumber;\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return (!!input) && (input.constructor === Object);\n}\nexports.isObject = isObject;\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\nexports.validateBBox = validateBBox;\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\nexports.validateId = validateId;\n// Deprecated methods\nfunction radians2degrees() {\n    throw new Error(\"method has been renamed to `radiansToDegrees`\");\n}\nexports.radians2degrees = radians2degrees;\nfunction degrees2radians() {\n    throw new Error(\"method has been renamed to `degreesToRadians`\");\n}\nexports.degrees2radians = degrees2radians;\nfunction distanceToDegrees() {\n    throw new Error(\"method has been renamed to `lengthToDegrees`\");\n}\nexports.distanceToDegrees = distanceToDegrees;\nfunction distanceToRadians() {\n    throw new Error(\"method has been renamed to `lengthToRadians`\");\n}\nexports.distanceToRadians = distanceToRadians;\nfunction radiansToDistance() {\n    throw new Error(\"method has been renamed to `radiansToLength`\");\n}\nexports.radiansToDistance = radiansToDistance;\nfunction bearingToAngle() {\n    throw new Error(\"method has been renamed to `bearingToAzimuth`\");\n}\nexports.bearingToAngle = bearingToAngle;\nfunction convertDistance() {\n    throw new Error(\"method has been renamed to `convertLength`\");\n}\nexports.convertDistance = convertDistance;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar helpers = require('@turf/helpers');\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n    // Handles null Geometry -- Skips this GeoJSON\n    if (geojson === null) return;\n    var j, k, l, geometry, stopG, coords,\n        geometryMaybeCollection,\n        wrapShrink = 0,\n        coordIndex = 0,\n        isGeometryCollection,\n        type = geojson.type,\n        isFeatureCollection = type === 'FeatureCollection',\n        isFeature = type === 'Feature',\n        stop = isFeatureCollection ? geojson.features.length : 1;\n\n    // This logic may look a little weird. The reason why it is that way\n    // is because it's trying to be fast. GeoJSON supports multiple kinds\n    // of objects at its root: FeatureCollection, Features, Geometries.\n    // This function has the responsibility of handling all of them, and that\n    // means that some of the `for` loops you see below actually just don't apply\n    // to certain inputs. For instance, if you give this just a\n    // Point geometry, then both loops are short-circuited and all we do\n    // is gradually rename the input until it's called 'geometry'.\n    //\n    // This also aims to allocate as few resources as possible: just a\n    // few numbers and booleans, rather than any temporary arrays as would\n    // be required with the normalization approach.\n    for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n        geometryMaybeCollection = (isFeatureCollection ? geojson.features[featureIndex].geometry :\n            (isFeature ? geojson.geometry : geojson));\n        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n            var multiFeatureIndex = 0;\n            var geometryIndex = 0;\n            geometry = isGeometryCollection ?\n                geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection;\n\n            // Handles null Geometry -- Skips this geometry\n            if (geometry === null) continue;\n            coords = geometry.coordinates;\n            var geomType = geometry.type;\n\n            wrapShrink = (excludeWrapCoord && (geomType === 'Polygon' || geomType === 'MultiPolygon')) ? 1 : 0;\n\n            switch (geomType) {\n            case null:\n                break;\n            case 'Point':\n                if (callback(coords, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                coordIndex++;\n                multiFeatureIndex++;\n                break;\n            case 'LineString':\n            case 'MultiPoint':\n                for (j = 0; j < coords.length; j++) {\n                    if (callback(coords[j], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                    coordIndex++;\n                    if (geomType === 'MultiPoint') multiFeatureIndex++;\n                }\n                if (geomType === 'LineString') multiFeatureIndex++;\n                break;\n            case 'Polygon':\n            case 'MultiLineString':\n                for (j = 0; j < coords.length; j++) {\n                    for (k = 0; k < coords[j].length - wrapShrink; k++) {\n                        if (callback(coords[j][k], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                        coordIndex++;\n                    }\n                    if (geomType === 'MultiLineString') multiFeatureIndex++;\n                    if (geomType === 'Polygon') geometryIndex++;\n                }\n                if (geomType === 'Polygon') multiFeatureIndex++;\n                break;\n            case 'MultiPolygon':\n                for (j = 0; j < coords.length; j++) {\n                    if (geomType === 'MultiPolygon') geometryIndex = 0;\n                    for (k = 0; k < coords[j].length; k++) {\n                        for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                            if (callback(coords[j][k][l], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                            coordIndex++;\n                        }\n                        geometryIndex++;\n                    }\n                    multiFeatureIndex++;\n                }\n                break;\n            case 'GeometryCollection':\n                for (j = 0; j < geometry.geometries.length; j++)\n                    if (coordEach(geometry.geometries[j], callback, excludeWrapCoord) === false) return false;\n                break;\n            default:\n                throw new Error('Unknown Geometry Type');\n            }\n        }\n    }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n    var previousValue = initialValue;\n    coordEach(geojson, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n        if (coordIndex === 0 && initialValue === undefined) previousValue = currentCoord;\n        else previousValue = callback(previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex);\n    }, excludeWrapCoord);\n    return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n    var i;\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        for (i = 0; i < geojson.features.length; i++) {\n            if (callback(geojson.features[i].properties, i) === false) break;\n        }\n        break;\n    case 'Feature':\n        callback(geojson.properties, 0);\n        break;\n    }\n}\n\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    propEach(geojson, function (currentProperties, featureIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentProperties;\n        else previousValue = callback(previousValue, currentProperties, featureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n    if (geojson.type === 'Feature') {\n        callback(geojson, 0);\n    } else if (geojson.type === 'FeatureCollection') {\n        for (var i = 0; i < geojson.features.length; i++) {\n            if (callback(geojson.features[i], i) === false) break;\n        }\n    }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    featureEach(geojson, function (currentFeature, featureIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentFeature;\n        else previousValue = callback(previousValue, currentFeature, featureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n    var coords = [];\n    coordEach(geojson, function (coord) {\n        coords.push(coord);\n    });\n    return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n    var i, j, g, geometry, stopG,\n        geometryMaybeCollection,\n        isGeometryCollection,\n        featureProperties,\n        featureBBox,\n        featureId,\n        featureIndex = 0,\n        isFeatureCollection = geojson.type === 'FeatureCollection',\n        isFeature = geojson.type === 'Feature',\n        stop = isFeatureCollection ? geojson.features.length : 1;\n\n    // This logic may look a little weird. The reason why it is that way\n    // is because it's trying to be fast. GeoJSON supports multiple kinds\n    // of objects at its root: FeatureCollection, Features, Geometries.\n    // This function has the responsibility of handling all of them, and that\n    // means that some of the `for` loops you see below actually just don't apply\n    // to certain inputs. For instance, if you give this just a\n    // Point geometry, then both loops are short-circuited and all we do\n    // is gradually rename the input until it's called 'geometry'.\n    //\n    // This also aims to allocate as few resources as possible: just a\n    // few numbers and booleans, rather than any temporary arrays as would\n    // be required with the normalization approach.\n    for (i = 0; i < stop; i++) {\n\n        geometryMaybeCollection = (isFeatureCollection ? geojson.features[i].geometry :\n            (isFeature ? geojson.geometry : geojson));\n        featureProperties = (isFeatureCollection ? geojson.features[i].properties :\n            (isFeature ? geojson.properties : {}));\n        featureBBox = (isFeatureCollection ? geojson.features[i].bbox :\n            (isFeature ? geojson.bbox : undefined));\n        featureId = (isFeatureCollection ? geojson.features[i].id :\n            (isFeature ? geojson.id : undefined));\n        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (g = 0; g < stopG; g++) {\n            geometry = isGeometryCollection ?\n                geometryMaybeCollection.geometries[g] : geometryMaybeCollection;\n\n            // Handle null Geometry\n            if (geometry === null) {\n                if (callback(null, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                continue;\n            }\n            switch (geometry.type) {\n            case 'Point':\n            case 'LineString':\n            case 'MultiPoint':\n            case 'Polygon':\n            case 'MultiLineString':\n            case 'MultiPolygon': {\n                if (callback(geometry, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                break;\n            }\n            case 'GeometryCollection': {\n                for (j = 0; j < geometry.geometries.length; j++) {\n                    if (callback(geometry.geometries[j], featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                }\n                break;\n            }\n            default:\n                throw new Error('Unknown Geometry Type');\n            }\n        }\n        // Only increase `featureIndex` per each feature\n        featureIndex++;\n    }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    geomEach(geojson, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentGeometry;\n        else previousValue = callback(previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n    geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n        // Callback for single geometry\n        var type = (geometry === null) ? null : geometry.type;\n        switch (type) {\n        case null:\n        case 'Point':\n        case 'LineString':\n        case 'Polygon':\n            if (callback(helpers.feature(geometry, properties, {bbox: bbox, id: id}), featureIndex, 0) === false) return false;\n            return;\n        }\n\n        var geomType;\n\n        // Callback for multi-geometry\n        switch (type) {\n        case 'MultiPoint':\n            geomType = 'Point';\n            break;\n        case 'MultiLineString':\n            geomType = 'LineString';\n            break;\n        case 'MultiPolygon':\n            geomType = 'Polygon';\n            break;\n        }\n\n        for (var multiFeatureIndex = 0; multiFeatureIndex < geometry.coordinates.length; multiFeatureIndex++) {\n            var coordinate = geometry.coordinates[multiFeatureIndex];\n            var geom = {\n                type: geomType,\n                coordinates: coordinate\n            };\n            if (callback(helpers.feature(geom, properties), featureIndex, multiFeatureIndex) === false) return false;\n        }\n    });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    flattenEach(geojson, function (currentFeature, featureIndex, multiFeatureIndex) {\n        if (featureIndex === 0 && multiFeatureIndex === 0 && initialValue === undefined) previousValue = currentFeature;\n        else previousValue = callback(previousValue, currentFeature, featureIndex, multiFeatureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n    flattenEach(geojson, function (feature$$1, featureIndex, multiFeatureIndex) {\n        var segmentIndex = 0;\n\n        // Exclude null Geometries\n        if (!feature$$1.geometry) return;\n        // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n        var type = feature$$1.geometry.type;\n        if (type === 'Point' || type === 'MultiPoint') return;\n\n        // Generate 2-vertex line segments\n        var previousCoords;\n        if (coordEach(feature$$1, function (currentCoord, coordIndex, featureIndexCoord, mutliPartIndexCoord, geometryIndex) {\n            // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n            if (previousCoords === undefined) {\n                previousCoords = currentCoord;\n                return;\n            }\n            var currentSegment = helpers.lineString([previousCoords, currentCoord], feature$$1.properties);\n            if (callback(currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) === false) return false;\n            segmentIndex++;\n            previousCoords = currentCoord;\n        }) === false) return false;\n    });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentInex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    var started = false;\n    segmentEach(geojson, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n        if (started === false && initialValue === undefined) previousValue = currentSegment;\n        else previousValue = callback(previousValue, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex);\n        started = true;\n    });\n    return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n    // validation\n    if (!geojson) throw new Error('geojson is required');\n\n    flattenEach(geojson, function (feature$$1, featureIndex, multiFeatureIndex) {\n        if (feature$$1.geometry === null) return;\n        var type = feature$$1.geometry.type;\n        var coords = feature$$1.geometry.coordinates;\n        switch (type) {\n        case 'LineString':\n            if (callback(feature$$1, featureIndex, multiFeatureIndex, 0, 0) === false) return false;\n            break;\n        case 'Polygon':\n            for (var geometryIndex = 0; geometryIndex < coords.length; geometryIndex++) {\n                if (callback(helpers.lineString(coords[geometryIndex], feature$$1.properties), featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n            }\n            break;\n        }\n    });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    lineEach(geojson, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentLine;\n        else previousValue = callback(previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!helpers.isObject(options)) throw new Error('options is invalid');\n    var featureIndex = options.featureIndex || 0;\n    var multiFeatureIndex = options.multiFeatureIndex || 0;\n    var geometryIndex = options.geometryIndex || 0;\n    var segmentIndex = options.segmentIndex || 0;\n\n    // Find FeatureIndex\n    var properties = options.properties;\n    var geometry;\n\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;\n        properties = properties || geojson.features[featureIndex].properties;\n        geometry = geojson.features[featureIndex].geometry;\n        break;\n    case 'Feature':\n        properties = properties || geojson.properties;\n        geometry = geojson.geometry;\n        break;\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n    case 'Polygon':\n    case 'MultiLineString':\n    case 'MultiPolygon':\n        geometry = geojson;\n        break;\n    default:\n        throw new Error('geojson is invalid');\n    }\n\n    // Find SegmentIndex\n    if (geometry === null) return null;\n    var coords = geometry.coordinates;\n    switch (geometry.type) {\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n        if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n        return helpers.lineString([coords[segmentIndex], coords[segmentIndex + 1]], properties, options);\n    case 'Polygon':\n        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n        if (segmentIndex < 0) segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n        return helpers.lineString([coords[geometryIndex][segmentIndex], coords[geometryIndex][segmentIndex + 1]], properties, options);\n    case 'MultiLineString':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n        return helpers.lineString([coords[multiFeatureIndex][segmentIndex], coords[multiFeatureIndex][segmentIndex + 1]], properties, options);\n    case 'MultiPolygon':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n        if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n        return helpers.lineString([coords[multiFeatureIndex][geometryIndex][segmentIndex], coords[multiFeatureIndex][geometryIndex][segmentIndex + 1]], properties, options);\n    }\n    throw new Error('geojson is invalid');\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!helpers.isObject(options)) throw new Error('options is invalid');\n    var featureIndex = options.featureIndex || 0;\n    var multiFeatureIndex = options.multiFeatureIndex || 0;\n    var geometryIndex = options.geometryIndex || 0;\n    var coordIndex = options.coordIndex || 0;\n\n    // Find FeatureIndex\n    var properties = options.properties;\n    var geometry;\n\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;\n        properties = properties || geojson.features[featureIndex].properties;\n        geometry = geojson.features[featureIndex].geometry;\n        break;\n    case 'Feature':\n        properties = properties || geojson.properties;\n        geometry = geojson.geometry;\n        break;\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n    case 'Polygon':\n    case 'MultiLineString':\n    case 'MultiPolygon':\n        geometry = geojson;\n        break;\n    default:\n        throw new Error('geojson is invalid');\n    }\n\n    // Find Coord Index\n    if (geometry === null) return null;\n    var coords = geometry.coordinates;\n    switch (geometry.type) {\n    case 'Point':\n        return helpers.point(coords, properties, options);\n    case 'MultiPoint':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        return helpers.point(coords[multiFeatureIndex], properties, options);\n    case 'LineString':\n        if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n        return helpers.point(coords[coordIndex], properties, options);\n    case 'Polygon':\n        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n        if (coordIndex < 0) coordIndex = coords[geometryIndex].length + coordIndex;\n        return helpers.point(coords[geometryIndex][coordIndex], properties, options);\n    case 'MultiLineString':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (coordIndex < 0) coordIndex = coords[multiFeatureIndex].length + coordIndex;\n        return helpers.point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case 'MultiPolygon':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n        if (coordIndex < 0) coordIndex = coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n        return helpers.point(coords[multiFeatureIndex][geometryIndex][coordIndex], properties, options);\n    }\n    throw new Error('geojson is invalid');\n}\n\nexports.coordEach = coordEach;\nexports.coordReduce = coordReduce;\nexports.propEach = propEach;\nexports.propReduce = propReduce;\nexports.featureEach = featureEach;\nexports.featureReduce = featureReduce;\nexports.coordAll = coordAll;\nexports.geomEach = geomEach;\nexports.geomReduce = geomReduce;\nexports.flattenEach = flattenEach;\nexports.flattenReduce = flattenReduce;\nexports.segmentEach = segmentEach;\nexports.segmentReduce = segmentReduce;\nexports.lineEach = lineEach;\nexports.lineReduce = lineReduce;\nexports.findSegment = findSegment;\nexports.findPoint = findPoint;\n","module.exports = {\n    bboxPolygon: require('@turf/bbox-polygon').default,\n    helpers: require('@turf/helpers'),\n    meta: require('@turf/meta'),\n    bbox: require('@turf/bbox').default,\n    center: require('@turf/center').default,\n};\n"]}
=======
//# sourceMappingURL=bundle.map
>>>>>>> master
